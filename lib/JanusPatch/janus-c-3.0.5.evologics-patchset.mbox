From eaf5e145e36cb3fd5f9132a4a81664cdb2bb9615 Mon Sep 17 00:00:00 2001
From: Oleksiy Kebkal <lesha@evologics.de>
Date: Fri, 20 Apr 2018 14:07:43 +0200
Subject: [PATCH 01/18] basic tcp istream implementation

---
 src/c/cli/options.def            |   2 +-
 src/c/janus/stream/istream.def   |   1 +
 src/c/janus/stream/istream_tcp.c | 180 +++++++++++++++++++++++++++++++
 3 files changed, 182 insertions(+), 1 deletion(-)
 create mode 100644 src/c/janus/stream/istream_tcp.c

diff --git a/src/c/cli/options.def b/src/c/cli/options.def
index f3d7586..29d5434 100644
--- a/src/c/cli/options.def
+++ b/src/c/cli/options.def
@@ -29,7 +29,7 @@ OPTION(PSET_BANDWIDTH,         "pset-bandwidth",         "Bandwidth (Hz)",
 OPTION(CHIP_LEN_EXP,           "chip-len-exp",           "Chip Length Dyadic Exponent",             0, "0")
 OPTION(SEQUENCE_32_CHIPS,      "sequence-32-chips",      "Initial sequence of 32 chips (hex)",      0, "")
 
-OPTION(STREAM_DRIVER,          "stream-driver",          "Stream Drv (nul/alsa/pulse/raw/wav/wmm)", 0, "wav")
+OPTION(STREAM_DRIVER,          "stream-driver",          "Stream Drv (nul/alsa/pulse/raw/wav/wmm/tcp)", 0, "wav")
 OPTION(STREAM_DRIVER_ARGS,     "stream-driver-args",     "Stream Driver Arguments",                 0, "janus.wav")
 OPTION(STREAM_FS,              "stream-fs",              "Stream Sampling Frequency (Hz)",          0, "44100")
 OPTION(STREAM_FORMAT,          "stream-format",          "Stream Format",                           0, "S16")
diff --git a/src/c/janus/stream/istream.def b/src/c/janus/stream/istream.def
index 0d96305..f7e587f 100644
--- a/src/c/janus/stream/istream.def
+++ b/src/c/janus/stream/istream.def
@@ -2,6 +2,7 @@ ISTREAM(null)
 ISTREAM(raw)
 ISTREAM(wav)
 ISTREAM(fifo)
+ISTREAM(tcp)
 
 #ifdef JANUS_WITH_ALSA
 ISTREAM(alsa)
diff --git a/src/c/janus/stream/istream_tcp.c b/src/c/janus/stream/istream_tcp.c
new file mode 100644
index 0000000..521e4fc
--- /dev/null
+++ b/src/c/janus/stream/istream_tcp.c
@@ -0,0 +1,180 @@
+//*************************************************************************
+// JANUS is a simple, robust, open standard signalling method for         *
+// underwater communications. See <http://www.januswiki.org> for details. *
+//*************************************************************************
+// Example software implementations provided by STO CMRE are subject to   *
+// Copyright (C) 2008-2013 STO Centre for Maritime Research and           *
+// Experimentation (CMRE)                                                 *
+//                                                                        *
+// This is free software: you can redistribute it and/or modify it        *
+// under the terms of the GNU General Public License version 3 as         *
+// published by the Free Software Foundation.                             *
+//                                                                        *
+// This program is distributed in the hope that it will be useful, but    *
+// WITHOUT ANY WARRANTY; without even the implied warranty of FITNESS     *
+// FOR A PARTICULAR PURPOSE. See the GNU General Public License for       *
+// more details.                                                          *
+//                                                                        *
+// You should have received a copy of the GNU General Public License      *
+// along with this program. If not, see <http://www.gnu.org/licenses/>.   *
+//*************************************************************************
+// Authors: Oleksiy Kebkal                                                *
+//*************************************************************************
+
+// ISO C headers.
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>             /* strerror */
+#include <dirent.h>
+#include <fcntl.h>
+#include <signal.h>
+#include <unistd.h>
+#include <errno.h>
+
+#include <arpa/inet.h>
+#include <netinet/in.h>
+#include <sys/socket.h>
+#include <sys/types.h>          /* waitpid() */
+#include <sys/un.h>
+#include <sys/wait.h>           /* waitpid() */
+
+// JANUS headers.
+#include <janus/janus.h>
+
+#define ERR_STR_BUFFER_SIZE 128
+
+/* server side TCP */
+
+struct private_data
+{
+  // Code of last error.
+  int error;
+  // Last error operation.
+  const char* error_op;
+
+  // socket handle.
+  int fd;
+  // socket parameters
+  struct sockaddr_in saun;
+  //! Error string buffer.
+  char error_str[ERR_STR_BUFFER_SIZE];
+};
+
+static int
+istream_open(janus_istream_t istream)
+{
+  JANUS_ISTREAM_PDATA;
+  int wait_conn_fd = -1;
+  int opt;
+
+  if ((wait_conn_fd = socket(AF_INET, SOCK_STREAM, 0)) < 0)
+    return -1;
+
+  opt = 1;
+  if (setsockopt(wait_conn_fd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof (opt)) < 0) {
+    pdata->error = errno;
+    pdata->error_op = "setting socket parameters";
+    return JANUS_ERROR_STREAM;
+  }
+  
+  pdata->saun.sin_family = AF_INET;
+  pdata->saun.sin_addr.s_addr = inet_addr("127.0.0.1");
+  pdata->saun.sin_port = htons(7777);
+  if (bind(wait_conn_fd,(struct sockaddr *)&pdata->saun, sizeof(pdata->saun)) < 0) {
+    pdata->error = errno;
+    pdata->error_op = "binding socket";
+    return JANUS_ERROR_STREAM;
+  }
+
+  if (listen(wait_conn_fd, 1) == -1) {
+    pdata->error = errno;
+    pdata->error_op = "listening socket";
+    return JANUS_ERROR_STREAM;
+  }
+  
+  pdata->fd = accept(wait_conn_fd, NULL, NULL);
+  if (pdata->fd < 0) {
+    pdata->error = errno;
+    pdata->error_op = "accepting socket connection";
+    return JANUS_ERROR_STREAM;
+  }
+
+  return JANUS_ERROR_NONE;
+}
+
+static int
+istream_close(janus_istream_t istream)
+{
+  JANUS_ISTREAM_PDATA;
+
+  if (pdata->fd >= 0) {
+    close(pdata->fd);
+  }
+  return JANUS_ERROR_NONE;
+}
+
+static void
+istream_free(janus_istream_t istream)
+{
+  free(istream->pdata);
+}
+
+static int
+istream_read(const janus_istream_t istream, void* frames, unsigned frame_count)
+{
+  JANUS_ISTREAM_PDATA;
+  int rv, offset = 0;
+  int requested_length = janus_istream_get_frame_size(istream) * frame_count;
+
+  do {
+    rv = read(pdata->fd, &((char*)frames)[offset], requested_length - offset);
+    if (rv > 0) {
+      offset += rv;
+    } else {
+      if (rv < 0 && (errno == EAGAIN || errno == EINTR)) continue;
+      break;
+    }
+  } while (offset < requested_length);
+  
+  if (offset == requested_length) {
+    return frame_count;
+  } else {
+    return JANUS_ERROR_STREAM;
+  }
+}
+
+static int
+istream_write(janus_istream_t istream, void* frames, unsigned frame_count)
+{
+  return 0;
+}
+
+static const char* 
+istream_get_error(janus_istream_t istream) 
+{ 
+  JANUS_ISTREAM_PDATA;
+  return strerror(pdata->error);
+}
+
+static const char*
+istream_get_error_op(janus_istream_t istream)
+{
+  JANUS_ISTREAM_PDATA;
+  return pdata->error_op;
+}
+
+int
+janus_istream_tcp_new(janus_istream_t istream)
+{
+  istream->pdata = calloc(1, sizeof(struct private_data));
+  istream->open = istream_open;
+  istream->close = istream_close;
+  istream->free = istream_free;
+  istream->read = istream_read;
+  istream->write = istream_write;
+  istream->get_error = istream_get_error;
+  istream->get_error_op = istream_get_error_op;
+  strcpy(istream->name, "TCP");
+
+  return JANUS_ERROR_NONE;
+}
-- 
2.24.0


From bbf86facc971655f794e48e91677f8b416b41925 Mon Sep 17 00:00:00 2001
From: Oleksiy Kebkal <lesha@evologics.de>
Date: Wed, 2 May 2018 14:32:13 +0200
Subject: [PATCH 02/18] added tcp supprot to input streams

---
 src/c/janus/stream/istream_tcp.c | 109 ++++++++++++++++++++++++++-----
 src/c/janus/stream/ostream.def   |   1 +
 2 files changed, 93 insertions(+), 17 deletions(-)

diff --git a/src/c/janus/stream/istream_tcp.c b/src/c/janus/stream/istream_tcp.c
index 521e4fc..fed498a 100644
--- a/src/c/janus/stream/istream_tcp.c
+++ b/src/c/janus/stream/istream_tcp.c
@@ -18,7 +18,7 @@
 // You should have received a copy of the GNU General Public License      *
 // along with this program. If not, see <http://www.gnu.org/licenses/>.   *
 //*************************************************************************
-// Authors: Oleksiy Kebkal                                                *
+// Author: Oleksiy Kebkal                                                 *
 //*************************************************************************
 
 // ISO C headers.
@@ -61,45 +61,120 @@ struct private_data
 };
 
 static int
-istream_open(janus_istream_t istream)
+istream_open_connect(janus_istream_t istream)
+{
+  JANUS_ISTREAM_PDATA;
+
+  if ((pdata->fd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
+    pdata->error = errno;
+    pdata->error_op = "socket creation error";
+    return JANUS_ERROR_STREAM;
+  }
+
+  /* TODO: add retry count here */
+  if (connect(pdata->fd, (struct sockaddr *)&pdata->saun, sizeof(pdata->saun)) == -1)
+  {
+    close(pdata->fd);
+    pdata->error = errno;
+    pdata->error_op = "connecting socket";
+    return JANUS_ERROR_STREAM;
+  }
+  return JANUS_ERROR_NONE;
+}
+
+static int
+istream_open_listen(janus_istream_t istream)
 {
   JANUS_ISTREAM_PDATA;
   int wait_conn_fd = -1;
   int opt;
 
-  if ((wait_conn_fd = socket(AF_INET, SOCK_STREAM, 0)) < 0)
-    return -1;
+  if ((wait_conn_fd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
+    pdata->error = errno;
+    pdata->error_op = "socket creation error";
+    goto istream_listen_error;
+  }
 
   opt = 1;
-  if (setsockopt(wait_conn_fd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof (opt)) < 0) {
+  if (setsockopt(wait_conn_fd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof (opt)) < 0)
+  {
     pdata->error = errno;
     pdata->error_op = "setting socket parameters";
-    return JANUS_ERROR_STREAM;
+    goto istream_listen_error;
   }
   
-  pdata->saun.sin_family = AF_INET;
-  pdata->saun.sin_addr.s_addr = inet_addr("127.0.0.1");
-  pdata->saun.sin_port = htons(7777);
-  if (bind(wait_conn_fd,(struct sockaddr *)&pdata->saun, sizeof(pdata->saun)) < 0) {
+  if (bind(wait_conn_fd,(struct sockaddr *)&pdata->saun, sizeof(pdata->saun)) < 0)
+  {
     pdata->error = errno;
     pdata->error_op = "binding socket";
-    return JANUS_ERROR_STREAM;
+    goto istream_listen_error;
   }
 
-  if (listen(wait_conn_fd, 1) == -1) {
+  if (listen(wait_conn_fd, 1) == -1)
+  {
     pdata->error = errno;
     pdata->error_op = "listening socket";
-    return JANUS_ERROR_STREAM;
+    goto istream_listen_error;
   }
   
   pdata->fd = accept(wait_conn_fd, NULL, NULL);
-  if (pdata->fd < 0) {
+  if (pdata->fd < 0)
+  {
     pdata->error = errno;
     pdata->error_op = "accepting socket connection";
-    return JANUS_ERROR_STREAM;
+    goto istream_listen_error;
   }
 
   return JANUS_ERROR_NONE;
+
+istream_listen_error:
+  if (wait_conn_fd >= 0) {
+      close(wait_conn_fd);
+  }
+  return JANUS_ERROR_STREAM;
+
+}
+
+static int
+istream_open(janus_istream_t istream)
+{
+  JANUS_ISTREAM_PDATA;
+  int rv = JANUS_ERROR_STREAM, port;
+  char *args;
+  char *socket_type, *ip_s, *port_s;
+
+  /* args: [connect|listen]:<ip>:<port> */
+  if (istream->args == NULL) {
+    pdata->error = EINVAL;
+    pdata->error_op = "tcp arguments undefined";
+    return rv;
+  }
+  args = strdup(istream->args);
+  socket_type = strtok(args, ":");
+  ip_s = strtok(NULL, ":");
+  port_s = strtok(NULL, ":");
+  if (!socket_type || !ip_s || !port_s) {
+    pdata->error = EINVAL;
+    pdata->error_op = "arguments parsing error";
+    goto stream_open_finish;
+  }
+  port = atoi(port_s);
+  
+  pdata->saun.sin_family = AF_INET;
+  pdata->saun.sin_addr.s_addr = inet_addr(ip_s);
+  pdata->saun.sin_port = htons(port);
+
+  if (strcmp(socket_type, "connect") == 0) {
+    rv = istream_open_connect(istream);
+  } else if (strcmp(socket_type, "listen") == 0) {
+    rv = istream_open_listen(istream);
+  } else {
+    pdata->error = EINVAL;
+    pdata->error_op = "connection type undefiend";
+  }
+  stream_open_finish:
+  free(args);
+  return rv;
 }
 
 static int
@@ -107,9 +182,9 @@ istream_close(janus_istream_t istream)
 {
   JANUS_ISTREAM_PDATA;
 
-  if (pdata->fd >= 0) {
+  if (pdata->fd >= 0)
     close(pdata->fd);
-  }
+
   return JANUS_ERROR_NONE;
 }
 
diff --git a/src/c/janus/stream/ostream.def b/src/c/janus/stream/ostream.def
index f01dbba..22b4788 100644
--- a/src/c/janus/stream/ostream.def
+++ b/src/c/janus/stream/ostream.def
@@ -25,6 +25,7 @@ OSTREAM(null)
 OSTREAM(raw)
 OSTREAM(wav)
 OSTREAM(fifo)
+OSTREAM(tcp)
 
 #ifdef JANUS_WITH_ALSA
 OSTREAM(alsa)
-- 
2.24.0


From 6b8186d751beed4abb13be951074aef7a4f9ae06 Mon Sep 17 00:00:00 2001
From: Oleksiy Kebkal <lesha@evologics.de>
Date: Wed, 2 May 2018 14:34:16 +0200
Subject: [PATCH 03/18] added tcp ostream support

---
 src/c/janus/stream/ostream_tcp.c | 255 +++++++++++++++++++++++++++++++
 1 file changed, 255 insertions(+)
 create mode 100644 src/c/janus/stream/ostream_tcp.c

diff --git a/src/c/janus/stream/ostream_tcp.c b/src/c/janus/stream/ostream_tcp.c
new file mode 100644
index 0000000..08bc739
--- /dev/null
+++ b/src/c/janus/stream/ostream_tcp.c
@@ -0,0 +1,255 @@
+//*************************************************************************
+// JANUS is a simple, robust, open standard signalling method for         *
+// underwater communications. See <http://www.januswiki.org> for details. *
+//*************************************************************************
+// Example software implementations provided by STO CMRE are subject to   *
+// Copyright (C) 2008-2013 STO Centre for Maritime Research and           *
+// Experimentation (CMRE)                                                 *
+//                                                                        *
+// This is free software: you can redistribute it and/or modify it        *
+// under the terms of the GNU General Public License version 3 as         *
+// published by the Free Software Foundation.                             *
+//                                                                        *
+// This program is distributed in the hope that it will be useful, but    *
+// WITHOUT ANY WARRANTY; without even the implied warranty of FITNESS     *
+// FOR A PARTICULAR PURPOSE. See the GNU General Public License for       *
+// more details.                                                          *
+//                                                                        *
+// You should have received a copy of the GNU General Public License      *
+// along with this program. If not, see <http://www.gnu.org/licenses/>.   *
+//*************************************************************************
+// Author: Oleksiy Kebkal                                                 *
+//*************************************************************************
+
+// ISO C headers.
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>             /* strerror */
+#include <dirent.h>
+#include <fcntl.h>
+#include <signal.h>
+#include <unistd.h>
+#include <errno.h>
+
+#include <arpa/inet.h>
+#include <netinet/in.h>
+#include <sys/socket.h>
+#include <sys/types.h>          /* waitpid() */
+#include <sys/un.h>
+#include <sys/wait.h>           /* waitpid() */
+
+// JANUS headers.
+#include <janus/janus.h>
+
+#define ERR_STR_BUFFER_SIZE 128
+
+/* server side TCP */
+
+struct private_data
+{
+  // Code of last error.
+  int error;
+  // Last error operation.
+  const char* error_op;
+
+  // socket handle.
+  int fd;
+  // socket parameters
+  struct sockaddr_in saun;
+  //! Error string buffer.
+  char error_str[ERR_STR_BUFFER_SIZE];
+};
+
+static int
+ostream_open_connect(janus_ostream_t ostream)
+{
+  JANUS_OSTREAM_PDATA;
+
+  if ((pdata->fd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
+    pdata->error = errno;
+    pdata->error_op = "socket creation error";
+    return JANUS_ERROR_STREAM;
+  }
+
+  /* TODO: add retry count here */
+  if (connect(pdata->fd, (struct sockaddr *)&pdata->saun, sizeof(pdata->saun)) == -1)
+  {
+    close(pdata->fd);
+    pdata->error = errno;
+    pdata->error_op = "connecting socket";
+    return JANUS_ERROR_STREAM;
+  }
+  return JANUS_ERROR_NONE;
+}
+
+static int
+ostream_open_listen(janus_ostream_t ostream)
+{
+  JANUS_OSTREAM_PDATA;
+  int wait_conn_fd = -1;
+  int opt;
+
+  if ((wait_conn_fd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
+    pdata->error = errno;
+    pdata->error_op = "socket creation error";
+    goto ostream_listen_error;
+  }
+
+  opt = 1;
+  if (setsockopt(wait_conn_fd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof (opt)) < 0)
+  {
+    pdata->error = errno;
+    pdata->error_op = "setting socket parameters";
+    goto ostream_listen_error;
+  }
+  
+  if (bind(wait_conn_fd,(struct sockaddr *)&pdata->saun, sizeof(pdata->saun)) < 0)
+  {
+    pdata->error = errno;
+    pdata->error_op = "binding socket";
+    goto ostream_listen_error;
+  }
+
+  if (listen(wait_conn_fd, 1) == -1)
+  {
+    pdata->error = errno;
+    pdata->error_op = "listening socket";
+    goto ostream_listen_error;
+  }
+  
+  pdata->fd = accept(wait_conn_fd, NULL, NULL);
+  if (pdata->fd < 0)
+  {
+    pdata->error = errno;
+    pdata->error_op = "accepting socket connection";
+    goto ostream_listen_error;
+  }
+
+  return JANUS_ERROR_NONE;
+
+ostream_listen_error:
+  if (wait_conn_fd >= 0) {
+      close(wait_conn_fd);
+  }
+  return JANUS_ERROR_STREAM;
+
+}
+
+static int
+ostream_open(janus_ostream_t ostream)
+{
+  JANUS_OSTREAM_PDATA;
+  int rv = JANUS_ERROR_STREAM, port;
+  char *args;
+  char *socket_type, *ip_s, *port_s;
+
+  /* args: [connect|listen]:<ip>:<port> */
+  if (ostream->args == NULL) {
+    pdata->error = EINVAL;
+    pdata->error_op = "tcp arguments undefined";
+    return rv;
+  }
+  args = strdup(ostream->args);
+  socket_type = strtok(args, ":");
+  ip_s = strtok(NULL, ":");
+  port_s = strtok(NULL, ":");
+  if (!socket_type || !ip_s || !port_s) {
+    pdata->error = EINVAL;
+    pdata->error_op = "arguments parsing error";
+    goto stream_open_finish;
+  }
+  port = atoi(port_s);
+  
+  pdata->saun.sin_family = AF_INET;
+  pdata->saun.sin_addr.s_addr = inet_addr(ip_s);
+  pdata->saun.sin_port = htons(port);
+
+  if (strcmp(socket_type, "connect") == 0) {
+    rv = ostream_open_connect(ostream);
+  } else if (strcmp(socket_type, "listen") == 0) {
+    rv = ostream_open_listen(ostream);
+  } else {
+    pdata->error = EINVAL;
+    pdata->error_op = "connection type undefiend";
+  }
+  stream_open_finish:
+  free(args);
+  return rv;
+}
+
+static int
+ostream_close(janus_ostream_t ostream)
+{
+  JANUS_OSTREAM_PDATA;
+
+  if (pdata->fd >= 0) {
+    close(pdata->fd);
+  }
+  return JANUS_ERROR_NONE;
+}
+
+static void
+ostream_free(janus_ostream_t ostream)
+{
+  free(ostream->pdata);
+}
+
+static int
+ostream_read(const janus_ostream_t ostream, void* frames, unsigned frame_count)
+{
+  return 0;
+}
+
+static int
+ostream_write(janus_ostream_t ostream, void* frames, unsigned frame_count)
+{
+  JANUS_OSTREAM_PDATA;
+  int rv, offset = 0;
+  int requested_length = janus_ostream_get_frame_size(ostream) * frame_count;
+
+  do {
+    rv = write(pdata->fd, &((char*)frames)[offset], requested_length - offset);
+    if (rv > 0) {
+      offset += rv;
+    } else {
+      if (rv < 0 && (errno == EAGAIN || errno == EINTR)) continue;
+      break;
+    }
+  } while (offset < requested_length);
+  
+  if (offset == requested_length) {
+    return frame_count;
+  } else {
+    return JANUS_ERROR_STREAM;
+  }
+}
+
+static const char* 
+ostream_get_error(janus_ostream_t ostream) 
+{ 
+  JANUS_OSTREAM_PDATA;
+  return strerror(pdata->error);
+}
+
+static const char*
+ostream_get_error_op(janus_ostream_t ostream)
+{
+  JANUS_OSTREAM_PDATA;
+  return pdata->error_op;
+}
+
+int
+janus_ostream_tcp_new(janus_ostream_t ostream)
+{
+  ostream->pdata = calloc(1, sizeof(struct private_data));
+  ostream->open = ostream_open;
+  ostream->close = ostream_close;
+  ostream->free = ostream_free;
+  ostream->read = ostream_read;
+  ostream->write = ostream_write;
+  ostream->get_error = ostream_get_error;
+  ostream->get_error_op = ostream_get_error_op;
+  strcpy(ostream->name, "TCP");
+
+  return JANUS_ERROR_NONE;
+}
-- 
2.24.0


From a047b8f09c5f69f7375a6c371bf890c8f680b66d Mon Sep 17 00:00:00 2001
From: Oleksiy Kebkal <lesha@evologics.de>
Date: Wed, 2 May 2018 14:42:45 +0200
Subject: [PATCH 04/18] warning fixes

---
 src/c/janus/stream/format.c      | 4 +++-
 src/c/janus/stream/istream.c     | 4 +++-
 src/c/janus/stream/istream_tcp.c | 1 +
 src/c/janus/stream/ostream.c     | 5 +++--
 src/c/janus/stream/ostream_tcp.c | 1 +
 5 files changed, 11 insertions(+), 4 deletions(-)

diff --git a/src/c/janus/stream/format.c b/src/c/janus/stream/format.c
index 44699fa..c3f48e0 100644
--- a/src/c/janus/stream/format.c
+++ b/src/c/janus/stream/format.c
@@ -255,9 +255,11 @@ janus_stream_format_parse(const char* format)
     str[i] = toupper(format[i]);
 
 #define FORMAT(a)                                                       \
-  if (strcmp(str, #a) == 0) rv = JANUS_STREAM_FORMAT_ ## a; else
+  if (strcmp(str, #a) == 0) { rv = JANUS_STREAM_FORMAT_ ## a; } else
 #include "format.def"
+  {
   rv = JANUS_STREAM_FORMAT_UNKNOWN;
+  }
 
   free(str);
   return rv;
diff --git a/src/c/janus/stream/istream.c b/src/c/janus/stream/istream.c
index 536364b..4bbf861 100644
--- a/src/c/janus/stream/istream.c
+++ b/src/c/janus/stream/istream.c
@@ -65,9 +65,11 @@ janus_istream_new(const char* driver, const char* args)
 
   // Select appropriate driver.
 #define ISTREAM(a)                                                      \
-  if (strcmp(#a, driver) == 0) rv = janus_istream_ ## a ## _new(istream); else
+  if (strcmp(#a, driver) == 0) { rv = janus_istream_ ## a ## _new(istream); } else
 #include "istream.def"
+  {
   rv = JANUS_ERROR_STREAM;
+  }
 
   if (rv != JANUS_ERROR_NONE)
   {
diff --git a/src/c/janus/stream/istream_tcp.c b/src/c/janus/stream/istream_tcp.c
index fed498a..75b2014 100644
--- a/src/c/janus/stream/istream_tcp.c
+++ b/src/c/janus/stream/istream_tcp.c
@@ -22,6 +22,7 @@
 //*************************************************************************
 
 // ISO C headers.
+#define _POSIX_C_SOURCE 200809L
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>             /* strerror */
diff --git a/src/c/janus/stream/ostream.c b/src/c/janus/stream/ostream.c
index 6d87658..40e2251 100644
--- a/src/c/janus/stream/ostream.c
+++ b/src/c/janus/stream/ostream.c
@@ -73,10 +73,11 @@ janus_ostream_new(const char* driver, const char* args)
 
   // Select appropriate driver.
 #define OSTREAM(a)                                                      \
-  if (strcmp(#a, driver) == 0) rv = janus_ostream_ ## a ## _new(ostream); else
+  if (strcmp(#a, driver) == 0) { rv = janus_ostream_ ## a ## _new(ostream); } else
 #include "ostream.def"
+  {
   rv = JANUS_ERROR_STREAM;
-
+  }
   if (rv != JANUS_ERROR_NONE)
   {
     JANUS_UTILS_MEMORY_FREE(ostream);
diff --git a/src/c/janus/stream/ostream_tcp.c b/src/c/janus/stream/ostream_tcp.c
index 08bc739..4431663 100644
--- a/src/c/janus/stream/ostream_tcp.c
+++ b/src/c/janus/stream/ostream_tcp.c
@@ -22,6 +22,7 @@
 //*************************************************************************
 
 // ISO C headers.
+#define _POSIX_C_SOURCE 200809L
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>             /* strerror */
-- 
2.24.0


From cfc2ede66f4b1eca9b2103810969c92456911faa Mon Sep 17 00:00:00 2001
From: Oleksiy Kebkal <lesha@evologics.de>
Date: Wed, 2 May 2018 14:44:03 +0200
Subject: [PATCH 05/18] added cfg.ini for sdmsh

---
 cfg.ini | 6 ++++++
 1 file changed, 6 insertions(+)
 create mode 100644 cfg.ini

diff --git a/cfg.ini b/cfg.ini
new file mode 100644
index 0000000..a3683f2
--- /dev/null
+++ b/cfg.ini
@@ -0,0 +1,6 @@
+--pset-file etc/parameter_sets.csv
+--pset-id 1
+--stream-driver tcp
+--stream-driver-args listen:127.0.0.1:9999
+--stream-fs 62500
+--stream-format S16
-- 
2.24.0


From a35f69ee534d202ebb43d8fff401c491c21a12e3 Mon Sep 17 00:00:00 2001
From: Oleksiy Kebkal <lesha@evologics.de>
Date: Thu, 3 May 2018 16:15:21 +0200
Subject: [PATCH 06/18] added --rx-once option to exit after demodulation

---
 src/c/cli/options.c      | 1 +
 src/c/cli/options.def    | 1 +
 src/c/janus/parameters.h | 2 ++
 src/c/janus/rx.c         | 6 ++++++
 4 files changed, 10 insertions(+)

diff --git a/src/c/cli/options.c b/src/c/cli/options.c
index 2ae2eda..448a426 100644
--- a/src/c/cli/options.c
+++ b/src/c/cli/options.c
@@ -277,6 +277,7 @@ cli_options_get_params(cli_options_t cli_options, janus_parameters_t params)
   params->colored_bit_prob    = atoi(cli_options->opts[COLORED_BIT_PROB].arg);
   params->cbp_high2medium     = atof(cli_options->opts[CBP_HIGH2MEDIUM].arg);
   params->cbp_medium2low      = atof(cli_options->opts[CBP_MEDIUM2LOW].arg);
+  params->rx_once             = atoi(cli_options->opts[RX_ONCE].arg);
 #endif
 }
 
diff --git a/src/c/cli/options.def b/src/c/cli/options.def
index 29d5434..3db32ce 100644
--- a/src/c/cli/options.def
+++ b/src/c/cli/options.def
@@ -62,6 +62,7 @@ OPTION(DETECTION_THRESHOLD,    "detection-threshold",       "Detection threshold
 OPTION(COLORED_BIT_PROB,       "colored-bit-probabilities", "Enable/Disable Colored Bit Probabilities", 0, "0")
 OPTION(CBP_HIGH2MEDIUM,        "cbp-high2medium",           "CBP High to Medium Threshold",             0, "0.2")
 OPTION(CBP_MEDIUM2LOW,         "cbp-medium2low",            "CBP Medium to Low Threshold",              0, "0.35")
+OPTION(RX_ONCE,                "rx-once",                    "Return after demodulation",               0, "0")
 #endif
 
 OPTION(CONFIG_FILE,            "config-file",            "Configuration file",                      0, "")
diff --git a/src/c/janus/parameters.h b/src/c/janus/parameters.h
index 4174b8b..4335020 100644
--- a/src/c/janus/parameters.h
+++ b/src/c/janus/parameters.h
@@ -93,6 +93,8 @@ struct janus_parameters
   janus_real_t cbp_high2medium;
   //! Colored Bit Probabilities: Medium to Low Probability Threshold
   janus_real_t cbp_medium2low;
+  //! Return after demodulation: enabled/disabled.
+  janus_uint8_t rx_once;
 };
 
 JANUS_EXPORT janus_parameters_t
diff --git a/src/c/janus/rx.c b/src/c/janus/rx.c
index 3478e71..727278a 100644
--- a/src/c/janus/rx.c
+++ b/src/c/janus/rx.c
@@ -137,6 +137,8 @@ struct janus_rx
   janus_rx_execution_state_t state;
   //! Detection threshold
   janus_real_t detection_threshold;
+  //! Return after demodulation: enabled/disabled.
+  janus_uint8_t rx_once;
 };
 
 static unsigned
@@ -306,6 +308,7 @@ janus_rx_new(janus_pset_t pset, janus_parameters_t params, janus_istream_t strea
   rx->stream = stream;
   rx->doppler_enable = params->doppler_correction;
   rx->spectrogram_enable = params->compute_channel_spectrogram;
+  rx->rx_once = params->rx_once;
 
   // Viterbi decoder.
   rx->viterbi = janus_viterbi_new(janus_trellis_default(), 8, DEFAULT_VITERBI_TBK_LEN);
@@ -498,6 +501,9 @@ janus_rx_execute(janus_rx_t rx, janus_packet_t packet, janus_rx_state_t state)
   // Blackout.
   if (rx->state == STATE_BLACKOUT)
   {
+    if (rx->rx_once)
+        return JANUS_ERROR_STREAM;
+
     rx->blackout_downcounter -= rx_bband_fifo_skip(rx, rx->blackout_downcounter);
     if (rx->blackout_downcounter == 0)
     {
-- 
2.24.0


From 6f0f0daa7e3f08a9778273f854bea9dea6887671 Mon Sep 17 00:00:00 2001
From: Maksym Komar <komar@evologics.de>
Date: Fri, 11 May 2018 18:23:16 +0200
Subject: [PATCH 07/18] fix founding g++ 7 version

---
 cmake/Macros.cmake | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/cmake/Macros.cmake b/cmake/Macros.cmake
index f9d5b4d..e497d80 100644
--- a/cmake/Macros.cmake
+++ b/cmake/Macros.cmake
@@ -75,7 +75,7 @@ macro(janus_probe_cxx)
   if(NOT JANUS_CXX_NAME)
     check_symbol_exists(__GNUC__ stdio.h JANUS_CXX_GNU)
     if(JANUS_CXX_GNU)
-      exec_program(${CMAKE_CXX_COMPILER} ARGS -dumpversion OUTPUT_VARIABLE verinfo)
+      exec_program(${CMAKE_CXX_COMPILER} ARGS -dumpfullversion -dumpversion OUTPUT_VARIABLE verinfo)
       string(REPLACE "." ";" gxxver ${verinfo})
       list(LENGTH gxxver gxxverlen)
       list(GET gxxver 0 gxxmaj)
-- 
2.24.0


From 7b232c9263b1e3a7133c7360409d9ca04dcce40d Mon Sep 17 00:00:00 2001
From: Maksym Komar <komar@evologics.de>
Date: Thu, 3 Oct 2019 10:22:56 +0200
Subject: [PATCH 08/18] Add ostream_reset() to ostream_tcp

---
 src/c/janus/stream/ostream_tcp.c | 7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/src/c/janus/stream/ostream_tcp.c b/src/c/janus/stream/ostream_tcp.c
index 4431663..1f9e506 100644
--- a/src/c/janus/stream/ostream_tcp.c
+++ b/src/c/janus/stream/ostream_tcp.c
@@ -239,12 +239,19 @@ ostream_get_error_op(janus_ostream_t ostream)
   return pdata->error_op;
 }
 
+static int
+ostream_reset(janus_ostream_t ostream)
+{
+  return JANUS_ERROR_NONE;
+}
+
 int
 janus_ostream_tcp_new(janus_ostream_t ostream)
 {
   ostream->pdata = calloc(1, sizeof(struct private_data));
   ostream->open = ostream_open;
   ostream->close = ostream_close;
+  ostream->reset = ostream_reset;
   ostream->free = ostream_free;
   ostream->read = ostream_read;
   ostream->write = ostream_write;
-- 
2.24.0


From 410c50fb0857f3b228e5402114d1e58a2e17a5f2 Mon Sep 17 00:00:00 2001
From: Maksym Komar <komar@evologics.de>
Date: Fri, 4 Oct 2019 12:35:24 +0200
Subject: [PATCH 09/18] Fix interraption by Ctrl-C TCP input stream

---
 src/c/janus/stream/istream_tcp.c | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/src/c/janus/stream/istream_tcp.c b/src/c/janus/stream/istream_tcp.c
index 75b2014..fc1a848 100644
--- a/src/c/janus/stream/istream_tcp.c
+++ b/src/c/janus/stream/istream_tcp.c
@@ -38,6 +38,7 @@
 #include <sys/types.h>          /* waitpid() */
 #include <sys/un.h>
 #include <sys/wait.h>           /* waitpid() */
+#include <signal.h>
 
 // JANUS headers.
 #include <janus/janus.h>
@@ -89,6 +90,7 @@ istream_open_listen(janus_istream_t istream)
   JANUS_ISTREAM_PDATA;
   int wait_conn_fd = -1;
   int opt;
+  void (* signal_handler)(int);
 
   if ((wait_conn_fd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
     pdata->error = errno;
@@ -118,7 +120,10 @@ istream_open_listen(janus_istream_t istream)
     goto istream_listen_error;
   }
   
+  signal_handler = signal(SIGINT, SIG_DFL);
   pdata->fd = accept(wait_conn_fd, NULL, NULL);
+  signal(SIGTERM, signal_handler);
+
   if (pdata->fd < 0)
   {
     pdata->error = errno;
-- 
2.24.0


From 97d33affc6c27c1f72bc41ac9f9fbb478102a9dd Mon Sep 17 00:00:00 2001
From: Oleksiy Kebkal <lesha@evologics.de>
Date: Tue, 5 Nov 2019 16:54:04 +0100
Subject: [PATCH 10/18] added skip-detection support to couple with sdmsh

---
 src/c/cli/options.c      |  3 +++
 src/c/cli/options.def    |  5 ++++-
 src/c/janus/parameters.h |  6 ++++++
 src/c/janus/rx.c         | 41 ++++++++++++++++++++++++++++++++++++++++
 4 files changed, 54 insertions(+), 1 deletion(-)

diff --git a/src/c/cli/options.c b/src/c/cli/options.c
index 448a426..a744d85 100644
--- a/src/c/cli/options.c
+++ b/src/c/cli/options.c
@@ -278,6 +278,9 @@ cli_options_get_params(cli_options_t cli_options, janus_parameters_t params)
   params->cbp_high2medium     = atof(cli_options->opts[CBP_HIGH2MEDIUM].arg);
   params->cbp_medium2low      = atof(cli_options->opts[CBP_MEDIUM2LOW].arg);
   params->rx_once             = atoi(cli_options->opts[RX_ONCE].arg);
+  params->skip_detection      = atoi(cli_options->opts[SKIP_DETECTION].arg);
+  params->detected_offset     = atoi(cli_options->opts[DETECTED_OFFSET].arg);
+  params->detected_doppler    = atof(cli_options->opts[DETECTED_DOPPLER].arg);
 #endif
 }
 
diff --git a/src/c/cli/options.def b/src/c/cli/options.def
index 3db32ce..7094ac7 100644
--- a/src/c/cli/options.def
+++ b/src/c/cli/options.def
@@ -62,7 +62,10 @@ OPTION(DETECTION_THRESHOLD,    "detection-threshold",       "Detection threshold
 OPTION(COLORED_BIT_PROB,       "colored-bit-probabilities", "Enable/Disable Colored Bit Probabilities", 0, "0")
 OPTION(CBP_HIGH2MEDIUM,        "cbp-high2medium",           "CBP High to Medium Threshold",             0, "0.2")
 OPTION(CBP_MEDIUM2LOW,         "cbp-medium2low",            "CBP Medium to Low Threshold",              0, "0.35")
-OPTION(RX_ONCE,                "rx-once",                    "Return after demodulation",               0, "0")
+OPTION(RX_ONCE,                "rx-once",                   "Return after demodulation",                0, "0")
+OPTION(SKIP_DETECTION,         "skip-detection",            "Start demodulation without detection",     0, "0")
+OPTION(DETECTED_OFFSET,        "detected-offset",           "Offset of the first chip of the packet",   0, "0")
+OPTION(DETECTED_DOPPLER,       "detected-doppler",          "Doppler value",                            0, "1.0")
 #endif
 
 OPTION(CONFIG_FILE,            "config-file",            "Configuration file",                      0, "")
diff --git a/src/c/janus/parameters.h b/src/c/janus/parameters.h
index 4335020..79b09a9 100644
--- a/src/c/janus/parameters.h
+++ b/src/c/janus/parameters.h
@@ -95,6 +95,12 @@ struct janus_parameters
   janus_real_t cbp_medium2low;
   //! Return after demodulation: enabled/disabled.
   janus_uint8_t rx_once;
+  //! Assume, the provided signal is already synchronized on the first chip
+  janus_uint8_t skip_detection;
+  //! Signal offset of the first symbol to be demodulated
+  janus_uint32_t detected_offset;
+  //! Doppler value
+  janus_real_t detected_doppler;
 };
 
 JANUS_EXPORT janus_parameters_t
diff --git a/src/c/janus/rx.c b/src/c/janus/rx.c
index 727278a..c85b2e5 100644
--- a/src/c/janus/rx.c
+++ b/src/c/janus/rx.c
@@ -139,6 +139,12 @@ struct janus_rx
   janus_real_t detection_threshold;
   //! Return after demodulation: enabled/disabled.
   janus_uint8_t rx_once;
+  //! Assume, the provided signal is already synchronized on the first chip
+  janus_uint8_t skip_detection;
+  //! Signal offset of the first symbol to be demodulated
+  janus_uint32_t detected_offset;
+  //! Doppler value
+  janus_real_t detected_doppler;
 };
 
 static unsigned
@@ -309,6 +315,9 @@ janus_rx_new(janus_pset_t pset, janus_parameters_t params, janus_istream_t strea
   rx->doppler_enable = params->doppler_correction;
   rx->spectrogram_enable = params->compute_channel_spectrogram;
   rx->rx_once = params->rx_once;
+  rx->skip_detection = params->skip_detection;
+  rx->detected_offset = params->detected_offset;
+  rx->detected_doppler = params->detected_doppler;
 
   // Viterbi decoder.
   rx->viterbi = janus_viterbi_new(janus_trellis_default(), 8, DEFAULT_VITERBI_TBK_LEN);
@@ -479,6 +488,38 @@ janus_rx_execute(janus_rx_t rx, janus_packet_t packet, janus_rx_state_t state)
   janus_complex_t* bband = NULL;
   int rv = janus_istream_read(rx->stream, &bband);
 
+  if (rx->skip_detection && rx->state < STATE_PACKET) {
+      skip_size = (rx->detected_offset + 128 /* FIR delay */) / 4;
+
+      janus_utils_fifo_put(rx->bband_fifo, bband, rv * sizeof(janus_complex_t));
+      /* printf("put: %d\n", janus_utils_fifo_get_size(rx->bband_fifo)); */
+      if (janus_utils_fifo_get_size(rx->bband_fifo) < skip_size * 16) {
+          ;
+      } else {
+          /* rx->gamma = JANUS_REAL_CONST(1.0); */
+          /* rx->speed = JANUS_REAL_CONST(0.0); */
+          rx->gamma = JANUS_REAL_CONST(rx->detected_doppler);
+          rx->speed = JANUS_REAL_CONST(1540.0) * (1 - rx->gamma);
+
+          printf("gamma = %f, speed = %f, offset = %d\n", rx->gamma, rx->speed, rx->detected_offset);
+          
+          rx_bband_fifo_skip(rx, (unsigned)skip_size);
+          
+          janus_demodulator_set_cfactor(rx->dmod, rx->gamma);
+          janus_demodulator_set_index(rx->dmod, janus_chips_alignment_get_preamble_size(rx->chips_alignment));
+          
+          if (state && state->bit_prob_size != -1)
+          {
+              // Setting bit probabilities buffer, size and index.
+              state->bit_prob_size = rx->dmod_chip_count;
+              state->bit_prob = JANUS_UTILS_MEMORY_REALLOC(state->bit_prob, janus_real_t, state->bit_prob_size);
+          }
+          rx->state = STATE_PACKET;
+      }
+      return 0;
+  }
+  
+  
   if (rv <= 0)
   {
     if (rv == JANUS_ERROR_OVERRUN)
-- 
2.24.0


From f9038abcec65a8549db4b840341e691857d17fe8 Mon Sep 17 00:00:00 2001
From: Oleksiy Kebkal <lesha@evologics.de>
Date: Tue, 5 Nov 2019 16:55:28 +0100
Subject: [PATCH 11/18] added plugins decoders

---
 src/c/plugins/plugin_000_01.c | 141 ++++++++++++++++++
 src/c/plugins/plugin_000_02.c | 139 ++++++++++++++++++
 src/c/plugins/plugin_000_03.c | 201 +++++++++++++++++++++++++
 src/c/plugins/plugin_002_08.c | 266 ++++++++++++++++++++++++++++++++++
 src/c/plugins/plugin_016_01.c | 109 ++++++++++++++
 5 files changed, 856 insertions(+)
 create mode 100644 src/c/plugins/plugin_000_01.c
 create mode 100644 src/c/plugins/plugin_000_02.c
 create mode 100644 src/c/plugins/plugin_000_03.c
 create mode 100644 src/c/plugins/plugin_002_08.c
 create mode 100644 src/c/plugins/plugin_016_01.c

diff --git a/src/c/plugins/plugin_000_01.c b/src/c/plugins/plugin_000_01.c
new file mode 100644
index 0000000..017e436
--- /dev/null
+++ b/src/c/plugins/plugin_000_01.c
@@ -0,0 +1,141 @@
+// ISO C headers.
+#include <stdlib.h>
+#include <string.h>
+#include <stdio.h>
+#include <limits.h>
+
+// JANUS headers.
+#include <janus/defaults.h>
+#include <janus/codec/codec.h>
+#include <janus/error.h>
+
+#include <janus/msb.h>
+
+#define SCHEDULE "Schedule"
+#define STATION_ID "Station Identifier"
+#define DESTINATION_ID "Destination Identifier"
+
+JANUS_PLUGIN_EXPORT int
+app_data_decode(janus_uint64_t app_data, janus_uint8_t app_data_size, unsigned* cargo_size, janus_app_fields_t app_fields)
+{
+  char value[4];
+  janus_uint8_t schedule, station_id, destination_id;
+  
+  // Schedule (8 bits)
+  schedule = (janus_uint8_t)((app_data >> 26) & (0xFFU));
+  sprintf(value, "%u", schedule);
+  janus_app_fields_add_field(app_fields, SCHEDULE, value);
+
+  // Station Identifier (8 bits)
+  station_id = (janus_uint8_t)((app_data >> 17) & (0xFFU));
+  sprintf(value, "%u", station_id);
+  janus_app_fields_add_field(app_fields, STATION_ID, value);
+
+  // Destination Identifier (8 bits)
+  destination_id = (janus_uint8_t)((app_data >> 9) & (0xFFU));
+  sprintf(value, "%u", destination_id);
+  janus_app_fields_add_field(app_fields, DESTINATION_ID, value);
+
+  // Cargo Size (9 bits).
+  *cargo_size = (unsigned)(app_data & (0x1FFU));
+  return 0;
+}
+
+JANUS_PLUGIN_EXPORT int
+app_data_encode(unsigned desired_cargo_size, janus_app_fields_t app_fields, janus_uint8_t app_data_size, unsigned* cargo_size, janus_uint64_t* app_data)
+{
+  *app_data = 0;
+
+  return 0;
+}
+
+JANUS_PLUGIN_EXPORT int
+cargo_decode(janus_uint8_t* cargo, unsigned cargo_size, janus_app_fields_t* app_fields)
+{
+  char value[32];
+  janus_uint32_t field = 0;
+  janus_uint8_t l1 = 0, l2 = 0;
+  double lat, lon;
+
+#define NATIONALITY   "Nationality"
+#define NATIONALITY_OFFSET (0)
+
+  log_barr(cargo, 10);
+
+  barr2int(cargo, NATIONALITY_OFFSET, &l1, 0, 5); l1 >>= 3;
+  barr2int(cargo, NATIONALITY_OFFSET + 5, &l2, 0, 5); l2 >>= 3;
+  sprintf(value, "%c%c", 'A' + l1 - 1, 'A' + l2 - 1);
+  janus_app_fields_add_field(*app_fields, NATIONALITY, value);
+
+#define LATITUDE "Latitude"
+#define LATITUDE_OFFSET (10)
+  
+  barr2int(cargo, LATITUDE_OFFSET, &field, 0, 24);
+  field = swap(field, (24+7)/8);
+  if (field == 0x800000) {
+      sprintf(value, "n.a.");
+  } else {
+      lat = (double)(field*90)/8388607;
+      if (lat > 90) lat = lat - 180;
+      sprintf(value, "%f", lat);
+  }
+  janus_app_fields_add_field(*app_fields, LATITUDE, value);
+
+#define LONGITUDE "Longitude"
+#define LONGITUDE_OFFSET (34)
+
+  barr2int(cargo, LONGITUDE_OFFSET, &field, 0, 25); 
+  field = swap(field, (25+7)/8);
+  field >>= 7;
+  if (field == 0x1000000) {
+      sprintf(value, "n.a.");
+  } else {
+      /* field -= 4; */
+      lon = (double)(field*90)/8388607;
+      if (lon > 180) lon = lon - 360.0;
+      sprintf(value, "%f", lon);
+  }
+  janus_app_fields_add_field(*app_fields, LONGITUDE, value);
+
+#define DEPTH "Depth"
+#define DEPTH_OFFSET (59)
+
+  field = 0;
+  barr2int(cargo, DEPTH_OFFSET, &field, 0, 13);
+  field = swap(field, (13+7)/8);
+  field >>= 3;
+  sprintf(value, "%d", field);
+  janus_app_fields_add_field(*app_fields, DEPTH, value);
+
+#define SPEED "Speed"
+#define SPEED_OFFSET (72)
+
+  field = 0;
+  barr2int(cargo, SPEED_OFFSET, &field, 0, 9);
+  field = swap(field, (9+7)/8);
+  field >>= 7;
+  sprintf(value, "%f", field * 0.1);
+  janus_app_fields_add_field(*app_fields, SPEED, value);
+
+#define HEADING "Heading"
+#define HEADING_OFFSET (81)
+
+  field = 0;
+  barr2int(cargo, HEADING_OFFSET, &field, 0, 9);
+  field = swap(field, (9+7)/8);
+  field >>= 7;
+  if (field == 511) {
+      sprintf(value, "n.a.");
+  } else {
+      sprintf(value, "%f", field * 0.705);
+  }
+  janus_app_fields_add_field(*app_fields, HEADING, value);
+  
+  return 0;
+}
+
+JANUS_PLUGIN_EXPORT int
+cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* cargo_size)
+{
+  return 0;
+}
diff --git a/src/c/plugins/plugin_000_02.c b/src/c/plugins/plugin_000_02.c
new file mode 100644
index 0000000..4f74f4e
--- /dev/null
+++ b/src/c/plugins/plugin_000_02.c
@@ -0,0 +1,139 @@
+// ISO C headers.
+#include <stdlib.h>
+#include <string.h>
+#include <stdio.h>
+#include <limits.h>
+
+// JANUS headers.
+#include <janus/defaults.h>
+#include <janus/codec/codec.h>
+#include <janus/error.h>
+
+#include <janus/msb.h>
+
+#define SCHEDULE "Schedule"
+#define STATION_ID "Station Identifier"
+#define DESTINATION_ID "Destination Identifier"
+
+JANUS_PLUGIN_EXPORT int
+app_data_decode(janus_uint64_t app_data, janus_uint8_t app_data_size, unsigned* cargo_size, janus_app_fields_t app_fields)
+{
+  char value[4];
+  janus_uint8_t schedule, station_id, destination_id;
+  
+  // Schedule (8 bits)
+  schedule = (janus_uint8_t)((app_data >> 26) & (0xFFU));
+  sprintf(value, "%u", schedule);
+  janus_app_fields_add_field(app_fields, SCHEDULE, value);
+
+  // Station Identifier (8 bits)
+  station_id = (janus_uint8_t)((app_data >> 17) & (0xFFU));
+  sprintf(value, "%u", station_id);
+  janus_app_fields_add_field(app_fields, STATION_ID, value);
+
+  // Destination Identifier (8 bits)
+  destination_id = (janus_uint8_t)((app_data >> 9) & (0xFFU));
+  sprintf(value, "%u", destination_id);
+  janus_app_fields_add_field(app_fields, DESTINATION_ID, value);
+
+  // Cargo Size (9 bits).
+  *cargo_size = (unsigned)(app_data & (0x1FFU));
+  return 0;
+}
+
+JANUS_PLUGIN_EXPORT int
+app_data_encode(unsigned desired_cargo_size, janus_app_fields_t app_fields, janus_uint8_t app_data_size, unsigned* cargo_size, janus_uint64_t* app_data)
+{
+  *app_data = 0;
+
+  return 0;
+}
+
+JANUS_PLUGIN_EXPORT int
+cargo_decode(janus_uint8_t* cargo, unsigned cargo_size, janus_app_fields_t* app_fields)
+{
+  char value[32];
+  janus_uint32_t field = 0;
+  janus_uint8_t l1 = 0, l2 = 0;
+  double lon;
+
+#define NATIONALITY        "Nationality"
+#define NATIONALITY_OFFSET (0)
+
+  log_barr(cargo, 10);
+
+  barr2int(cargo, NATIONALITY_OFFSET, &l1, 0, 5); l1 >>= 3;
+  barr2int(cargo, NATIONALITY_OFFSET + 5, &l2, 0, 5); l2 >>= 3;
+  sprintf(value, "%c%c", 'A' + l1 - 1, 'A' + l2 - 1);
+  janus_app_fields_add_field(*app_fields, NATIONALITY, value);
+
+#define O2        "O2"
+#define O2_OFFSET (10)
+
+  field = 0;
+  barr2int(cargo, O2_OFFSET, &field, 0, 6);
+  field >>= 2;
+  sprintf(value, "%f", field * 0.1 + 17);
+  janus_app_fields_add_field(*app_fields, O2, value);
+  
+#define CO2        "CO2"
+#define CO2_OFFSET (16)
+  
+  field = 0;
+  barr2int(cargo, CO2_OFFSET, &field, 0, 6);
+  field >>= 2;
+  sprintf(value, "%f", field * 0.1);
+  janus_app_fields_add_field(*app_fields, CO2, value);
+
+#define CO        "CO"
+#define CO_OFFSET (22)
+  
+  field = 0;
+  barr2int(cargo, CO_OFFSET, &field, 0, 8);
+  sprintf(value, "%d", field);
+  janus_app_fields_add_field(*app_fields, CO, value);
+  
+#define H2        "H2"
+#define H2_OFFSET (30)
+
+  field = 0;
+  barr2int(cargo, H2_OFFSET, &field, 0, 6);
+  field >>= 2;
+  sprintf(value, "%f", field * 0.1);
+  janus_app_fields_add_field(*app_fields, H2, value);
+
+#define PRESSURE        "Pressure"
+#define PRESSURE_OFFSET (36)
+  
+  field = 0;
+  barr2int(cargo, PRESSURE_OFFSET, &field, 0, 10);
+  field = swap(field, (10+7)/8);
+  field >>= 6;
+  sprintf(value, "%f", field * 0.1 + 0.9);
+  janus_app_fields_add_field(*app_fields, PRESSURE, value);
+  
+#define TEMPERATURE        "Temperature"
+#define TEMPERATURE_OFFSET (46)
+  
+  field = 0;
+  barr2int(cargo, TEMPERATURE_OFFSET, &field, 0, 6);
+  field >>= 2;
+  sprintf(value, "%d", field);
+  janus_app_fields_add_field(*app_fields, TEMPERATURE, value);
+
+#define SURVIVORS        "Survivors"
+#define SURVIVORS_OFFSET (52)
+  
+  field = 0;
+  barr2int(cargo, SURVIVORS_OFFSET, &field, 0, 8);
+  sprintf(value, "%d", field);
+  janus_app_fields_add_field(*app_fields, SURVIVORS, value);
+
+  return 0;
+}
+
+JANUS_PLUGIN_EXPORT int
+cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* cargo_size)
+{
+  return 0;
+}
diff --git a/src/c/plugins/plugin_000_03.c b/src/c/plugins/plugin_000_03.c
new file mode 100644
index 0000000..3020e7e
--- /dev/null
+++ b/src/c/plugins/plugin_000_03.c
@@ -0,0 +1,201 @@
+// ISO C headers.
+#include <stdlib.h>
+#include <string.h>
+#include <stdio.h>
+#include <limits.h>
+
+// JANUS headers.
+#include <janus/defaults.h>
+#include <janus/codec/codec.h>
+#include <janus/error.h>
+
+#include <janus/msb.h>
+
+#define SCHEDULE "Schedule"
+#define STATION_ID "Station Identifier"
+#define DESTINATION_ID "Destination Identifier"
+
+JANUS_PLUGIN_EXPORT int
+app_data_decode(janus_uint64_t app_data, janus_uint8_t app_data_size, unsigned* cargo_size, janus_app_fields_t app_fields)
+{
+  char value[4];
+  janus_uint8_t schedule, station_id, destination_id;
+  
+  // Schedule (8 bits)
+  schedule = (janus_uint8_t)((app_data >> 26) & (0xFFU));
+  sprintf(value, "%u", schedule);
+  janus_app_fields_add_field(app_fields, SCHEDULE, value);
+
+  // Station Identifier (8 bits)
+  station_id = (janus_uint8_t)((app_data >> 17) & (0xFFU));
+  sprintf(value, "%u", station_id);
+  janus_app_fields_add_field(app_fields, STATION_ID, value);
+
+  // Destination Identifier (8 bits)
+  destination_id = (janus_uint8_t)((app_data >> 9) & (0xFFU));
+  sprintf(value, "%u", destination_id);
+  janus_app_fields_add_field(app_fields, DESTINATION_ID, value);
+
+  // Cargo Size (9 bits).
+  *cargo_size = (unsigned)(app_data & (0x1FFU));
+  return 0;
+}
+
+JANUS_PLUGIN_EXPORT int
+app_data_encode(unsigned desired_cargo_size, janus_app_fields_t app_fields, janus_uint8_t app_data_size, unsigned* cargo_size, janus_uint64_t* app_data)
+{
+  *app_data = 0;
+
+  return 0;
+}
+
+JANUS_PLUGIN_EXPORT int
+cargo_decode(janus_uint8_t* cargo, unsigned cargo_size, janus_app_fields_t* app_fields)
+{
+  char value[32];
+  janus_uint32_t field = 0;
+  janus_uint8_t l1 = 0, l2 = 0;
+  double lat, lon;
+
+#define NATIONALITY   "Nationality"
+#define NATIONALITY_OFFSET (0)
+
+  barr2int(cargo, NATIONALITY_OFFSET, &l1, 0, 5); l1 >>= 3;
+  barr2int(cargo, NATIONALITY_OFFSET + 5, &l2, 0, 5); l2 >>= 3;
+  sprintf(value, "%c%c", 'A' + l1 - 1, 'A' + l2 - 1);
+  janus_app_fields_add_field(*app_fields, NATIONALITY, value);
+
+#define LATITUDE "Latitude"
+#define LATITUDE_OFFSET (10)
+  
+  barr2int(cargo, LATITUDE_OFFSET, &field, 0, 24);
+  field = swap(field, (24+7)/8);
+  if (field == 0x800000) {
+      sprintf(value, "n.a.");
+  } else {
+      lat = (double)(field*90)/8388607;
+      if (lat > 90) lat = lat - 180;
+      sprintf(value, "%f", lat);
+  }
+  janus_app_fields_add_field(*app_fields, LATITUDE, value);
+
+#define LONGITUDE "Longitude"
+#define LONGITUDE_OFFSET (34)
+
+  barr2int(cargo, LONGITUDE_OFFSET, &field, 0, 25); 
+  field = swap(field, (25+7)/8);
+  field >>= 7;
+  if (field == 0x1000000) {
+      sprintf(value, "n.a.");
+  } else {
+      /* field -= 4; */
+      lon = (double)(field*90)/8388607;
+      if (lon > 180) lon = lon - 360.0;
+      sprintf(value, "%f", lon);
+  }
+  janus_app_fields_add_field(*app_fields, LONGITUDE, value);
+
+#define DEPTH "Depth"
+#define DEPTH_OFFSET (59)
+
+  field = 0;
+  barr2int(cargo, DEPTH_OFFSET, &field, 0, 13);
+  field = swap(field, (13+7)/8);
+  field >>= 3;
+  sprintf(value, "%d", field);
+  janus_app_fields_add_field(*app_fields, DEPTH, value);
+
+#define SPEED "Speed"
+#define SPEED_OFFSET (72)
+
+  field = 0;
+  barr2int(cargo, SPEED_OFFSET, &field, 0, 9);
+  field = swap(field, (9+7)/8);
+  field >>= 7;
+  sprintf(value, "%f", field * 0.1);
+  janus_app_fields_add_field(*app_fields, SPEED, value);
+
+#define HEADING "Heading"
+#define HEADING_OFFSET (81)
+
+  field = 0;
+  barr2int(cargo, HEADING_OFFSET, &field, 0, 9);
+  field = swap(field, (9+7)/8);
+  field >>= 7;
+  if (field == 511) {
+      sprintf(value, "n.a.");
+  } else {
+      sprintf(value, "%f", field * 0.705);
+  }
+  janus_app_fields_add_field(*app_fields, HEADING, value);
+    
+#define O2        "O2"
+#define O2_OFFSET (90)
+
+  field = 0;
+  barr2int(cargo, O2_OFFSET, &field, 0, 6);
+  field >>= 2;
+  sprintf(value, "%f", field * 0.1 + 17);
+  janus_app_fields_add_field(*app_fields, O2, value);
+  
+#define CO2        "CO2"
+#define CO2_OFFSET (96)
+  
+  field = 0;
+  barr2int(cargo, CO2_OFFSET, &field, 0, 6);
+  field >>= 2;
+  sprintf(value, "%f", field * 0.1);
+  janus_app_fields_add_field(*app_fields, CO2, value);
+
+#define CO        "CO"
+#define CO_OFFSET (102)
+  
+  field = 0;
+  barr2int(cargo, CO_OFFSET, &field, 0, 8);
+  sprintf(value, "%d", field);
+  janus_app_fields_add_field(*app_fields, CO, value);
+  
+#define H2        "H2"
+#define H2_OFFSET (110)
+
+  field = 0;
+  barr2int(cargo, H2_OFFSET, &field, 0, 6);
+  field >>= 2;
+  sprintf(value, "%f", field * 0.1);
+  janus_app_fields_add_field(*app_fields, H2, value);
+
+#define PRESSURE        "Pressure"
+#define PRESSURE_OFFSET (116)
+  
+  field = 0;
+  barr2int(cargo, PRESSURE_OFFSET, &field, 0, 10);
+  field = swap(field, (10+7)/8);
+  field >>= 6;
+  sprintf(value, "%f", field * 0.1 + 0.9);
+  janus_app_fields_add_field(*app_fields, PRESSURE, value);
+  
+#define TEMPERATURE        "Temperature"
+#define TEMPERATURE_OFFSET (126)
+  
+  field = 0;
+  barr2int(cargo, TEMPERATURE_OFFSET, &field, 0, 6);
+  field >>= 2;
+  sprintf(value, "%d", field);
+  janus_app_fields_add_field(*app_fields, TEMPERATURE, value);
+
+#define SURVIVORS        "Survivors"
+#define SURVIVORS_OFFSET (132)
+  
+  field = 0;
+  barr2int(cargo, SURVIVORS_OFFSET, &field, 0, 8);
+  sprintf(value, "%d", field);
+  janus_app_fields_add_field(*app_fields, SURVIVORS, value);
+
+  return 0;
+}
+
+JANUS_PLUGIN_EXPORT int
+cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* cargo_size)
+{
+  return 0;
+}
diff --git a/src/c/plugins/plugin_002_08.c b/src/c/plugins/plugin_002_08.c
new file mode 100644
index 0000000..43b53a1
--- /dev/null
+++ b/src/c/plugins/plugin_002_08.c
@@ -0,0 +1,266 @@
+// ISO C headers.
+#include <stdlib.h>
+#include <string.h>
+#include <stdio.h>
+#include <limits.h>
+
+// JANUS headers.
+#include <janus/defaults.h>
+#include <janus/codec/codec.h>
+#include <janus/error.h>
+
+#include <janus/msb.h>
+
+#define SCHEDULE      "Schedule"
+#define STATION_ID    "Station Identifier"
+#define CONTACT_TYPE  "Type"
+#define CONTACT_DEPTH "Depth"
+#define NoEC          "Number of Extra Contacts"
+
+char *type_str(int contact_type)
+{
+    static char *type_str_[] ={"Nuclear submarine", "AIP submarine", "Conventional submarine",
+                               "AUV", "Ship", "Airplane", "UAV", "USV", "Buoy", "Bottom node"};
+    return ((contact_type < 10) ? type_str_[contact_type] : "n.a.");
+}
+
+char *status_str(int status)
+{
+    static char *status_str_[] = {
+        "Under way - using engine",
+        "At anchor",
+        "Not under command",
+        "Restricted manoeuvrability",
+        "Constrained by draught",
+        "Moored",
+        "Aground",
+        "Engaged in fishin",
+        "Under way - sailing",
+        "For future use",
+        "For future use",
+        "Power-driven vessel towing astern",
+        "Power-driven vessel pushing ahead",
+        "For future use",
+        "AIS-SART"};
+    return ((status < 15) ? status_str_[status] : "Undefined/default");
+}
+
+uint32_t contact_depth(uint32_t depth)
+{
+    if (depth < 700) {
+        return depth;
+    } else if (depth < 730) {
+        return 700 + (depth - 700) * 10;
+    } else if (depth < 830) {
+        return 1000 + (depth - 730) * 20;
+    } else if (depth < 950) {
+        return 3000 + (depth - 830) * 25;
+    } else if (depth < 1024) {
+        return 6000 + (depth - 950) * 75;
+    }
+}
+
+double contact_speed(uint32_t speed)
+{
+    if (speed < 200) {
+        return speed * 0.1;
+    } else if (speed < 250) {
+        return 20 + (speed - 200) * 1;
+    } else if (speed < 254) {
+        return 70 + (speed - 250) * 5;
+    } else {
+        return 86.0;
+    }
+}
+
+JANUS_PLUGIN_EXPORT int
+app_data_decode(janus_uint64_t app_data, janus_uint8_t app_data_size, unsigned* cargo_size, janus_app_fields_t app_fields)
+{
+  char value[16];
+  janus_uint8_t schedule, station_id, contact_type, depth, noc;
+  
+  // Schedule (8 bits)
+  schedule = (janus_uint8_t)((app_data >> 26) & (0xFFU));
+  sprintf(value, "%u", schedule);
+  janus_app_fields_add_field(app_fields, SCHEDULE, value);
+
+  // Station Identifier (8 bits)
+  station_id = (janus_uint8_t)((app_data >> 17) & (0xFFU));
+  sprintf(value, "%u", station_id);
+  janus_app_fields_add_field(app_fields, STATION_ID, value);
+
+  // Number of contacts (3 bits).
+  noc = (unsigned)(app_data & (0x7U));
+  sprintf(value, "%u", noc);
+  janus_app_fields_add_field(app_fields, NoEC, value);
+
+  // Contact 1 Type (4)
+  contact_type = (janus_uint8_t)((app_data >> 13) & (0x0FU));
+  sprintf(value, "%s", type_str(contact_type));
+  janus_app_fields_add_field(app_fields, CONTACT_TYPE, value);
+  
+  // Contact 1 Depth (10 bits)
+  depth = (janus_uint16_t)((app_data >> 3) & (0x3FFU));
+  sprintf(value, "%u", contact_depth(depth));
+  janus_app_fields_add_field(app_fields, CONTACT_DEPTH, value);
+
+  *cargo_size = (100 + 97 * (noc) + 16 + 7) / 8;
+  return 0;
+}
+
+JANUS_PLUGIN_EXPORT int
+app_data_encode(unsigned desired_cargo_size, janus_app_fields_t app_fields, janus_uint8_t app_data_size, unsigned* cargo_size, janus_uint64_t* app_data)
+{
+  *app_data = 0;
+
+  return 0;
+}
+
+JANUS_PLUGIN_EXPORT int
+cargo_decode(janus_uint8_t* cargo, unsigned cargo_size, janus_app_fields_t* app_fields)
+{
+  char value[32];
+  janus_uint32_t field = 0;
+  janus_uint8_t i, noc, field_len, status;
+  double lat0, lon0, lat, lon;
+  janus_uint8_t lat_flag = 0, lon_flag = 0;
+
+  noc = (cargo_size * 8) / 97;
+ 
+  for (i = 0; i < noc; i++) {
+      if (i > 0) {
+          
+#define TYPE_OFFSET (100 + 97 * (i - 1))
+          field = 0;
+          barr2int(cargo, TYPE_OFFSET, &field, 0, 4);
+          field >>= 4;
+          sprintf(value, "%s", type_str(field));
+          janus_app_fields_add_field(*app_fields, CONTACT_TYPE, value);
+          
+#define DEPTH_OFFSET (100 + 97 * (i - 1) + 4)
+          field = 0;
+          barr2int(cargo, DEPTH_OFFSET, &field, 0, 10);
+          field = swap(field, (10+7)/8);
+          field >>= 6;
+          sprintf(value, "%u", contact_depth(field));
+          janus_app_fields_add_field(*app_fields, CONTACT_DEPTH, value);
+      }
+#define USERID "User ID"
+#define USERID_OFFSET ((i > 0 ? (100 + 97 * (i - 1) + 14) : 0))
+      field = 0;
+      barr2int(cargo, USERID_OFFSET, &field, 0, 30);
+      field = swap(field, (30+7)/8);
+      field >>= 2;
+      sprintf(value, "%u", field);
+      janus_app_fields_add_field(*app_fields, USERID, value);
+
+#define LATITUDE "Latitude"
+#define LATITUDE_OFFSET ((i > 0 ? (100 + 97 * (i - 1) + 14) : 0) + 30)
+      field = 0;
+      field_len = i == 0 ? 24 : 16;
+      barr2int(cargo, LATITUDE_OFFSET, &field, 0, field_len);
+      field = swap(field, (field_len+7)/8);
+      if (field == 0x800000 || lat_flag) {
+          sprintf(value, "n.a.");
+          if (i == 0) {
+              lat_flag = 1;
+          }
+      } else {
+          if (field_len == 16) {
+              lat = (double)((int16_t)field*90)/8388607;
+          } else {
+              lat = (double)(field*90)/8388607;
+          }
+          if (lat > 90) lat = lat - 180;
+          if (i == 0) {
+              lat0 = lat;
+          } else {
+              lat = lat0 + lat;
+          }
+          sprintf(value, "%f", lat);
+      }
+      janus_app_fields_add_field(*app_fields, LATITUDE, value);
+
+#define LONGITUDE "Longitude"
+#define LONGITUDE_OFFSET ((i > 0 ? (100 + 97 * (i - 1) + 60) : 54))
+      field = 0;
+      field_len = i == 0 ? 25 : 16;
+      barr2int(cargo, LONGITUDE_OFFSET, &field, 0, field_len);
+      field = swap(field, (field_len+7)/8);
+      field >>= (field_len % 8) ? 8 - (field_len % 8) : 0;
+      printf("lon field: %d\n", field);
+      if (field == 0x1000000 || lon_flag) {
+          sprintf(value, "n.a.");
+          if (i == 0) {
+              lon_flag = 1;
+          }
+      } else {
+          if (field_len == 16) {
+              lon = ((double)((int16_t)field*90))/8388607;
+          } else {
+              lon = ((double)(field*90))/8388607;
+          }
+          if (lon > 180) lon = lon - 360;
+          if (i == 0) {
+              lon0 = lon;
+          } else {
+              lon = lon0 + lon;
+          }
+          sprintf(value, "%f", lon);
+      }
+      janus_app_fields_add_field(*app_fields, LONGITUDE, value);
+      
+#define SPEED "Speed"
+#define SPEED_OFFSET ((i > 0 ? (100 + 97 * (i - 1) + 76) : 79))
+      field = 0;
+      barr2int(cargo, SPEED_OFFSET, &field, 0, 8);
+      if (field == 255) {
+          sprintf(value, "n.a.");
+      } else if (field == 254) {
+          sprintf(value, ">= 86");
+      } else {
+          sprintf(value, "%f", contact_speed(field));
+      }
+      janus_app_fields_add_field(*app_fields, SPEED, value);
+
+#define NAVIGATIONAL_STATUS "Navigational Status"
+#define NAVIGATIONAL_STATUS_OFFSET ((i > 0 ? (100 + 97 * (i - 1) + 93) : 96))
+      field = 0;
+      barr2int(cargo, NAVIGATIONAL_STATUS_OFFSET, &field, 0, 4);
+      status = field >> 4;
+      
+#define TRUE_HEADING "True Heading"
+#define COG "CoG"
+#define COG_OFFSET ((i > 0 ? (100 + 97 * (i - 1) + 84) : 87))
+      field = 0;
+      barr2int(cargo, COG_OFFSET, &field, 0, 9);
+      field = swap(field, (9+7)/8);
+      field >>= 7;
+      if (field == 511) {
+          sprintf(value, "n.a.");
+      } else {
+          sprintf(value, "%f", field * 0.705);
+      }
+      switch (status) {
+      case 1: /* At anchor */
+      case 5: /* Moored */
+      case 6: /* Aground */
+          janus_app_fields_add_field(*app_fields, TRUE_HEADING, value);          
+          break;
+      default:
+          janus_app_fields_add_field(*app_fields, COG, value);
+      }
+
+      sprintf(value, "%s", status_str(status));
+      janus_app_fields_add_field(*app_fields, NAVIGATIONAL_STATUS, value);
+  }
+  
+  printf("\n\nnoc: %d, cargo_size: %d\n\n", noc, cargo_size);
+  return 0;
+}
+
+JANUS_PLUGIN_EXPORT int
+cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* cargo_size)
+{
+  return 0;
+}
diff --git a/src/c/plugins/plugin_016_01.c b/src/c/plugins/plugin_016_01.c
new file mode 100644
index 0000000..068f3e9
--- /dev/null
+++ b/src/c/plugins/plugin_016_01.c
@@ -0,0 +1,109 @@
+// ISO C headers.
+#include <stdlib.h>
+#include <string.h>
+#include <stdio.h>
+
+// JANUS headers.
+#include <janus/defaults.h>
+#include <janus/codec/codec.h>
+#include <janus/error.h>
+
+#define STATION_ID_LABEL "Station Identifier"
+#define DESTINATION_ID_LABEL "Destination Identifier"
+#define ACK_REQUEST_LABEL "Ack_Request"
+
+#define PAYLOAD_SIZE_LABEL "Payload Size"
+#define PAYLOAD_LABEL "Payload"
+
+static inline void
+app_data_decode_station_id(janus_uint64_t app_data, janus_app_fields_t app_fields)
+{
+  char name[] = STATION_ID_LABEL;
+  char value[4];
+
+  janus_uint8_t station_id = (janus_uint8_t)((app_data >> 18) & (0xFFU));
+  sprintf(value, "%u", station_id);
+
+  janus_app_fields_add_field(app_fields, name, value);
+}
+
+static inline void
+app_data_decode_destination_id(janus_uint64_t app_data, janus_app_fields_t app_fields)
+{
+  char name[] = DESTINATION_ID_LABEL;
+  char value[4];
+
+  janus_uint8_t station_id = (janus_uint8_t)((app_data >> 10) & (0xFFU));
+  sprintf(value, "%u", station_id);
+
+  janus_app_fields_add_field(app_fields, name, value);
+}
+
+static inline void
+app_data_decode_ack_request(janus_uint64_t app_data, janus_app_fields_t app_fields)
+{
+  char name[] = ACK_REQUEST_LABEL;
+  char value[16];
+
+  janus_uint8_t ack_req = (janus_uint8_t)((app_data >> 9) & (0x1U));
+  sprintf(value, "%u", ack_req);
+
+  janus_app_fields_add_field(app_fields, name, value);
+}
+
+static inline unsigned
+app_data_decode_cargo_size(janus_uint64_t app_data)
+{
+  return (unsigned)(app_data & (0xFFU));
+}
+
+JANUS_PLUGIN_EXPORT int
+app_data_decode(janus_uint64_t app_data, janus_uint8_t app_data_size, unsigned* cargo_size, janus_app_fields_t app_fields)
+{
+  // Station Identifier (8 bits).
+  app_data_decode_station_id(app_data, app_fields);
+
+  // Destination Identifier (8 bits).
+  app_data_decode_destination_id(app_data, app_fields);
+
+  // Ack_Request (1 bit).
+  app_data_decode_ack_request(app_data, app_fields);
+  
+  // Cargo Size (8 bits).
+  *cargo_size = app_data_decode_cargo_size(app_data);
+
+  return 0;
+}
+
+JANUS_PLUGIN_EXPORT int
+app_data_encode(unsigned desired_cargo_size, janus_app_fields_t app_fields, janus_uint8_t app_data_size, unsigned* cargo_size, janus_uint64_t* app_data)
+{
+  return 0;
+}
+
+JANUS_PLUGIN_EXPORT int
+cargo_decode(janus_uint8_t* cargo, unsigned cargo_size, janus_app_fields_t* app_fields)
+{
+  int rv = 0;
+  int payload_size = cargo_size - 2;
+
+  if (*app_fields == 0)
+  {
+    *app_fields = janus_app_fields_new();
+  }
+
+  char size_string[4];
+  sprintf(size_string, "%u", payload_size);
+
+  janus_app_fields_add_field(*app_fields, PAYLOAD_SIZE_LABEL, size_string);
+
+  janus_app_fields_add_blob(*app_fields, PAYLOAD_LABEL, cargo, payload_size);
+
+  return rv;
+}
+
+JANUS_PLUGIN_EXPORT int
+cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* cargo_size)
+{
+  return 0;
+}
-- 
2.24.0


From 6d034f1461c795f1a90347713940128d422cdbec Mon Sep 17 00:00:00 2001
From: Oleksiy Kebkal <lesha@evologics.de>
Date: Wed, 6 Nov 2019 17:14:28 +0100
Subject: [PATCH 12/18] added plugin coded helper functions

---
 src/c/janus/msb.c | 63 +++++++++++++++++++++++++++++++++++++++++++++++
 src/c/janus/msb.h | 20 +++++++++++++++
 2 files changed, 83 insertions(+)
 create mode 100644 src/c/janus/msb.c
 create mode 100644 src/c/janus/msb.h

diff --git a/src/c/janus/msb.c b/src/c/janus/msb.c
new file mode 100644
index 0000000..1b12596
--- /dev/null
+++ b/src/c/janus/msb.c
@@ -0,0 +1,63 @@
+// ISO C headers.
+#include <stdlib.h>
+#include <string.h>
+#include <stdio.h>
+#include <limits.h>
+
+#include "msb.h"
+
+int int2barr(char *barr, int offset, void *val, unsigned int l, unsigned int h)
+{
+    unsigned int j;
+
+    if (h < l)
+    {
+        return 0;
+    }
+
+    for (j=l;j<h;j++)
+        if (BARR_TEST(val,j))
+            BARR_SET(barr,(offset+j-l));
+        else 
+            BARR_CLEAR(barr,(offset+j-l));
+    return h-l;
+}
+
+int barr2int(char *barr, int offset, void *val, unsigned int l, unsigned int h)
+{
+    unsigned int j;
+
+    if (h < l)
+    {
+        return 0;
+    }
+
+    for (j=0;j<h-l;j++)
+        if (BARR_TEST(barr,offset+j+l))
+            BARR_SET(val,j);
+        else
+            BARR_CLEAR(val,j);
+    return h-l;
+}
+
+
+int swap(int32_t from, size_t len)
+{
+    int32_t to = 0, i;
+    char *barr_from = (char*)&from;
+    char *barr_to = (char*)&to;
+    for (i = 0; i < len; i++) {
+        barr_to[i] = barr_from[len - i - 1];
+    }
+    return to;
+}
+
+void log_barr(char *barr, int len)
+{
+    int i;
+
+    if (barr!=NULL)
+        for (i=0;i<len;i++)
+            printf("%d",BARR_TEST(barr,i)&&1);
+    printf("\n");
+}
diff --git a/src/c/janus/msb.h b/src/c/janus/msb.h
new file mode 100644
index 0000000..58dfb55
--- /dev/null
+++ b/src/c/janus/msb.h
@@ -0,0 +1,20 @@
+#ifndef JANUS_MSB_H_INCLUDED_
+#define JANUS_MSB_H_INCLUDED_
+
+#include <stdint.h>
+
+#define BARR_ELBITS (8)
+#define BARR_ARRAYSIZE(N) (((N) +BARR_ELBITS-1) / BARR_ELBITS)
+#define BARR_ELNUM(N) ((N) / BARR_ELBITS)
+#define BARR_BITNUM(N) ((N) % BARR_ELBITS)
+#define BARR_SET(barr, N) (((char*)(barr))[BARR_ELNUM(N)] |= 0x080 >> BARR_BITNUM(N))
+#define BARR_CLEAR(barr, N) (((char*)(barr))[BARR_ELNUM(N)] &= ~(0x080 >> BARR_BITNUM(N)))
+#define BARR_FLIP(barr, N) (((char*)(barr))[BARR_ELNUM(N)] ^= 0x080 >> BARR_BITNUM(N))
+#define BARR_TEST(barr, N) (((char*)(barr))[BARR_ELNUM(N)] & (0x080 >> BARR_BITNUM(N)))
+
+int int2barr(char *barr, int offset, void *val, unsigned int l, unsigned int h);
+int barr2int(char *barr, int offset, void *val, unsigned int l, unsigned int h);
+int swap(int32_t from, size_t len);
+void log_barr(char *barr, int len);
+
+#endif
-- 
2.24.0


From 1e9251ed47c707342f1b5462eb247576e1b55bd5 Mon Sep 17 00:00:00 2001
From: Oleksiy Kebkal <lesha@evologics.de>
Date: Fri, 8 Nov 2019 13:07:35 +0100
Subject: [PATCH 13/18] added plugin encoders

---
 src/c/cli/options.c           |  11 +-
 src/c/cli/options.h           |   2 +-
 src/c/plugins/plugin_000_01.c |  99 ++++++++++++-
 src/c/plugins/plugin_000_02.c |  97 ++++++++++++-
 src/c/plugins/plugin_000_03.c | 148 ++++++++++++++++++++
 src/c/plugins/plugin_002_08.c | 255 ++++++++++++++++++++++++++++++++--
 src/c/plugins/plugin_016_01.c |  72 +++++++++-
 7 files changed, 659 insertions(+), 25 deletions(-)

diff --git a/src/c/cli/options.c b/src/c/cli/options.c
index a744d85..25a6bb7 100644
--- a/src/c/cli/options.c
+++ b/src/c/cli/options.c
@@ -85,12 +85,12 @@ static int
 cli_options_parse_file(const char* file, char*** argv)
 {
   int i = 0;
-  char opt[512];
-  char arg[512];
+  char opt[512*4];
+  char arg[512*4];
   char* str = NULL;
   int argc = 0;
   int argc_max = 10;
-  char line[1024];
+  char line[1024*4];
   char** pargv = NULL;
   int rv;
 
@@ -103,7 +103,7 @@ cli_options_parse_file(const char* file, char*** argv)
 
   while (!feof(fd))
   {
-    if (fscanf(fd, "%1023[^\n]\n", line) != 1)
+    if (fscanf(fd, "%2049[^\n]\n", line) != 1)
     {
       break;
     }
@@ -116,7 +116,7 @@ cli_options_parse_file(const char* file, char*** argv)
       continue;
     }
 
-    rv = sscanf(str, "%511[^ ] %511[^\n]\n", opt, arg);
+    rv = sscanf(str, "%511[^ ] %2047[^\n]\n", opt, arg);
     free(str);
     if (rv != 2)
     {
@@ -336,7 +336,6 @@ cli_options_get_packet(cli_options_t cli_options, janus_packet_t packet)
   }
 
   janus_packet_set_validity(packet, 1);
-  
   if (cli_options->opts[PACKET_APP_FIELDS].is_present)
   {
     int res;
diff --git a/src/c/cli/options.h b/src/c/cli/options.h
index 0c47794..d498aa5 100644
--- a/src/c/cli/options.h
+++ b/src/c/cli/options.h
@@ -31,7 +31,7 @@
 
 #define OPTION_LEN   30
 #define DESC_LEN     50
-#define ARG_LEN      (JANUS_MIN_PKT_SIZE + JANUS_MAX_PKT_CARGO_SIZE + 1)
+#define ARG_LEN      (2048)
 
 enum
 {
diff --git a/src/c/plugins/plugin_000_01.c b/src/c/plugins/plugin_000_01.c
index 017e436..0ef2162 100644
--- a/src/c/plugins/plugin_000_01.c
+++ b/src/c/plugins/plugin_000_01.c
@@ -3,6 +3,7 @@
 #include <string.h>
 #include <stdio.h>
 #include <limits.h>
+#include <math.h>
 
 // JANUS headers.
 #include <janus/defaults.h>
@@ -44,8 +45,32 @@ app_data_decode(janus_uint64_t app_data, janus_uint8_t app_data_size, unsigned*
 JANUS_PLUGIN_EXPORT int
 app_data_encode(unsigned desired_cargo_size, janus_app_fields_t app_fields, janus_uint8_t app_data_size, unsigned* cargo_size, janus_uint64_t* app_data)
 {
+  uint64_t field;
+  int i;
   *app_data = 0;
-
+  
+  // Cargo Size (9 bits).
+  *app_data = (desired_cargo_size & 0x1FFU);
+  *cargo_size = desired_cargo_size;
+
+  for (i = 0; i != app_fields->field_count; ++i) {
+      if (strcmp(app_fields->fields[i].name, SCHEDULE) == 0) {
+          field = atoi(app_fields->fields[i].value) & 0xFFU;
+          field <<= 26;
+          *app_data |= field;
+      }
+      if (strcmp(app_fields->fields[i].name, STATION_ID) == 0) {
+          field = atoi(app_fields->fields[i].value) & 0xFFU;
+          field <<= 17;
+          *app_data |= field;
+      }
+      if (strcmp(app_fields->fields[i].name, DESTINATION_ID) == 0) {
+          field = atoi(app_fields->fields[i].value) & 0xFFU;
+          field <<= 9;
+          *app_data |= field;
+      }
+  }
+  
   return 0;
 }
 
@@ -60,8 +85,6 @@ cargo_decode(janus_uint8_t* cargo, unsigned cargo_size, janus_app_fields_t* app_
 #define NATIONALITY   "Nationality"
 #define NATIONALITY_OFFSET (0)
 
-  log_barr(cargo, 10);
-
   barr2int(cargo, NATIONALITY_OFFSET, &l1, 0, 5); l1 >>= 3;
   barr2int(cargo, NATIONALITY_OFFSET + 5, &l2, 0, 5); l2 >>= 3;
   sprintf(value, "%c%c", 'A' + l1 - 1, 'A' + l2 - 1);
@@ -137,5 +160,75 @@ cargo_decode(janus_uint8_t* cargo, unsigned cargo_size, janus_app_fields_t* app_
 JANUS_PLUGIN_EXPORT int
 cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* cargo_size)
 {
+  uint32_t field;
+  double f;
+  unsigned i;
+  janus_uint8_t l1 = 0, l2 = 0;
+  
+  *cargo_size = (106 + 7) / 8;
+  *cargo = JANUS_UTILS_MEMORY_REALLOC(*cargo, janus_uint8_t, *cargo_size);
+  for (i = 0; i != app_fields->field_count; ++i) {
+      
+      if (strcmp(app_fields->fields[i].name, NATIONALITY) == 0) {
+          l1 = app_fields->fields[i].value[0] - 'A' + 1;
+          l2 = app_fields->fields[i].value[1] - 'A' + 1;
+          l1 <<= 3; int2barr(*cargo, NATIONALITY_OFFSET, &l1, 0, 5);
+          l2 <<= 3; int2barr(*cargo, NATIONALITY_OFFSET + 5, &l2, 0, 5);
+      }
+      
+      if (strcmp(app_fields->fields[i].name, LATITUDE) == 0) {
+          field = 0;
+          if (strcmp(app_fields->fields[i].value, "n.a.") == 0) {
+              field = 0x800000;
+          } else {
+              f = atof(app_fields->fields[i].value);
+              if (f < 0) f = f + 180;
+              field = round(f * 8388607 / 90);
+          }
+          field = swap(field, (24+7)/8);
+          int2barr(*cargo, LATITUDE_OFFSET, &field, 0, 24);
+      }
+      
+      if (strcmp(app_fields->fields[i].name, LONGITUDE) == 0) {
+          field = 0;
+          if (strcmp(app_fields->fields[i].value, "n.a.") == 0) {
+              field = 0x1000000;
+          } else {
+              f = atof(app_fields->fields[i].value);
+              if (f < 0) f = f + 360;
+              field = round(f * 8388607 / 90);
+          }
+          field <<= 7;
+          field = swap(field, (25+7)/8);
+          int2barr(*cargo, LONGITUDE_OFFSET, &field, 0, 25); 
+      }
+      
+      if (strcmp(app_fields->fields[i].name, DEPTH) == 0) {
+          field = atoi(app_fields->fields[i].value);
+          field <<= 3;
+          field = swap(field, (13+7)/8);
+          int2barr(*cargo, DEPTH_OFFSET, &field, 0, 13);
+      }
+
+      if (strcmp(app_fields->fields[i].name, SPEED) == 0) {
+          f = atof(app_fields->fields[i].value);
+          field = round(f * 10);
+          field <<= 7;
+          field = swap(field, (9+7)/8);
+          int2barr(*cargo, SPEED_OFFSET, &field, 0, 9);
+      }
+  
+      if (strcmp(app_fields->fields[i].name, HEADING) == 0) {
+          f = atof(app_fields->fields[i].value);
+          if (strcmp(app_fields->fields[i].value, "n.a.") == 0) {
+              field = 511;
+          } else {
+              field = round(f / 0.705);
+              field <<= 7;
+          }
+          field = swap(field, (9+7)/8);
+          int2barr(*cargo, HEADING_OFFSET, &field, 0, 9);
+      }
+  }
   return 0;
 }
diff --git a/src/c/plugins/plugin_000_02.c b/src/c/plugins/plugin_000_02.c
index 4f74f4e..f057fef 100644
--- a/src/c/plugins/plugin_000_02.c
+++ b/src/c/plugins/plugin_000_02.c
@@ -44,8 +44,32 @@ app_data_decode(janus_uint64_t app_data, janus_uint8_t app_data_size, unsigned*
 JANUS_PLUGIN_EXPORT int
 app_data_encode(unsigned desired_cargo_size, janus_app_fields_t app_fields, janus_uint8_t app_data_size, unsigned* cargo_size, janus_uint64_t* app_data)
 {
+  uint64_t field;
+  int i;
   *app_data = 0;
-
+  
+  // Cargo Size (9 bits).
+  *app_data = (desired_cargo_size & 0x1FFU);
+  *cargo_size = desired_cargo_size;
+
+  for (i = 0; i != app_fields->field_count; ++i) {
+      if (strcmp(app_fields->fields[i].name, SCHEDULE) == 0) {
+          field = atoi(app_fields->fields[i].value) & 0xFFU;
+          field <<= 26;
+          *app_data |= field;
+      }
+      if (strcmp(app_fields->fields[i].name, STATION_ID) == 0) {
+          field = atoi(app_fields->fields[i].value) & 0xFFU;
+          field <<= 17;
+          *app_data |= field;
+      }
+      if (strcmp(app_fields->fields[i].name, DESTINATION_ID) == 0) {
+          field = atoi(app_fields->fields[i].value) & 0xFFU;
+          field <<= 9;
+          *app_data |= field;
+      }
+  }
+  
   return 0;
 }
 
@@ -60,8 +84,6 @@ cargo_decode(janus_uint8_t* cargo, unsigned cargo_size, janus_app_fields_t* app_
 #define NATIONALITY        "Nationality"
 #define NATIONALITY_OFFSET (0)
 
-  log_barr(cargo, 10);
-
   barr2int(cargo, NATIONALITY_OFFSET, &l1, 0, 5); l1 >>= 3;
   barr2int(cargo, NATIONALITY_OFFSET + 5, &l2, 0, 5); l2 >>= 3;
   sprintf(value, "%c%c", 'A' + l1 - 1, 'A' + l2 - 1);
@@ -135,5 +157,74 @@ cargo_decode(janus_uint8_t* cargo, unsigned cargo_size, janus_app_fields_t* app_
 JANUS_PLUGIN_EXPORT int
 cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* cargo_size)
 {
+  uint32_t field;
+  double f;
+  unsigned i;
+  janus_uint8_t l1 = 0, l2 = 0;
+  
+  *cargo_size = (76 + 7) / 8;
+  *cargo = JANUS_UTILS_MEMORY_REALLOC(*cargo, janus_uint8_t, *cargo_size);
+  for (i = 0; i != app_fields->field_count; ++i) {
+      
+      if (strcmp(app_fields->fields[i].name, NATIONALITY) == 0) {
+          l1 = app_fields->fields[i].value[0] - 'A' + 1;
+          l2 = app_fields->fields[i].value[1] - 'A' + 1;
+          l1 <<= 3; int2barr(*cargo, NATIONALITY_OFFSET, &l1, 0, 5);
+          l2 <<= 3; int2barr(*cargo, NATIONALITY_OFFSET + 5, &l2, 0, 5);
+      }
+
+      if (strcmp(app_fields->fields[i].name, O2) == 0) {
+          f = atof(app_fields->fields[i].value);
+          if ( f >= 17 && f < 23.3) {
+              field = round((f - 17) * 10.0);
+          } else {
+              field = 63;
+          }
+          field <<= 2;
+          int2barr(*cargo, O2_OFFSET, &field, 0, 6);
+      }
+      
+      if (strcmp(app_fields->fields[i].name, CO2) == 0) {
+          f = atof(app_fields->fields[i].value);
+          field = round(f * 10);
+          field <<= 2;
+          int2barr(*cargo, CO2_OFFSET, &field, 0, 6);
+      }
+
+      if (strcmp(app_fields->fields[i].name, CO) == 0) {
+          field = atoi(app_fields->fields[i].value);
+          int2barr(*cargo, CO_OFFSET, &field, 0, 8);
+      }
+  
+      if (strcmp(app_fields->fields[i].name, H2) == 0) {
+          f = atof(app_fields->fields[i].value);
+          field = round(f * 10);
+          field <<= 2;
+          int2barr(*cargo, H2_OFFSET, &field, 0, 6);
+      }
+
+      if (strcmp(app_fields->fields[i].name, PRESSURE) == 0) {
+          f = atof(app_fields->fields[i].value);
+          if ( f >= 0.9 && f < 103.2) {
+              field = round((f - 0.9) * 10.0);
+          } else {
+              field = 1023;
+          }
+          field <<= 6;
+          field = swap(field, (10+7)/8);
+          int2barr(*cargo, PRESSURE_OFFSET, &field, 0, 10);
+      }
+  
+      if (strcmp(app_fields->fields[i].name, TEMPERATURE) == 0) {
+          field = atoi(app_fields->fields[i].value);
+          field <<= 2;
+          int2barr(*cargo, TEMPERATURE_OFFSET, &field, 0, 6);
+      }
+
+      if (strcmp(app_fields->fields[i].name, SURVIVORS) == 0) {
+          field = atoi(app_fields->fields[i].value);
+          int2barr(*cargo, SURVIVORS_OFFSET, &field, 0, 8);
+      }
+  }
   return 0;
 }
diff --git a/src/c/plugins/plugin_000_03.c b/src/c/plugins/plugin_000_03.c
index 3020e7e..726a893 100644
--- a/src/c/plugins/plugin_000_03.c
+++ b/src/c/plugins/plugin_000_03.c
@@ -44,8 +44,32 @@ app_data_decode(janus_uint64_t app_data, janus_uint8_t app_data_size, unsigned*
 JANUS_PLUGIN_EXPORT int
 app_data_encode(unsigned desired_cargo_size, janus_app_fields_t app_fields, janus_uint8_t app_data_size, unsigned* cargo_size, janus_uint64_t* app_data)
 {
+  uint64_t field;
+  int i;
   *app_data = 0;
+  
+  // Cargo Size (9 bits).
+  *app_data = (desired_cargo_size & 0x1FFU);
+  *cargo_size = desired_cargo_size;
 
+  for (i = 0; i != app_fields->field_count; ++i) {
+      if (strcmp(app_fields->fields[i].name, SCHEDULE) == 0) {
+          field = atoi(app_fields->fields[i].value) & 0xFFU;
+          field <<= 26;
+          *app_data |= field;
+      }
+      if (strcmp(app_fields->fields[i].name, STATION_ID) == 0) {
+          field = atoi(app_fields->fields[i].value) & 0xFFU;
+          field <<= 17;
+          *app_data |= field;
+      }
+      if (strcmp(app_fields->fields[i].name, DESTINATION_ID) == 0) {
+          field = atoi(app_fields->fields[i].value) & 0xFFU;
+          field <<= 9;
+          *app_data |= field;
+      }
+  }
+  
   return 0;
 }
 
@@ -197,5 +221,129 @@ cargo_decode(janus_uint8_t* cargo, unsigned cargo_size, janus_app_fields_t* app_
 JANUS_PLUGIN_EXPORT int
 cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* cargo_size)
 {
+  uint32_t field;
+  double f;
+  unsigned i;
+  janus_uint8_t l1 = 0, l2 = 0;
+  
+  *cargo_size = (156 + 7) / 8;
+  *cargo = JANUS_UTILS_MEMORY_REALLOC(*cargo, janus_uint8_t, *cargo_size);
+  for (i = 0; i != app_fields->field_count; ++i) {
+      
+      if (strcmp(app_fields->fields[i].name, NATIONALITY) == 0) {
+          l1 = app_fields->fields[i].value[0] - 'A' + 1;
+          l2 = app_fields->fields[i].value[1] - 'A' + 1;
+          l1 <<= 3; int2barr(*cargo, NATIONALITY_OFFSET, &l1, 0, 5);
+          l2 <<= 3; int2barr(*cargo, NATIONALITY_OFFSET + 5, &l2, 0, 5);
+      }
+
+      if (strcmp(app_fields->fields[i].name, LATITUDE) == 0) {
+          field = 0;
+          if (strcmp(app_fields->fields[i].value, "n.a.") == 0) {
+              field = 0x800000;
+          } else {
+              f = atof(app_fields->fields[i].value);
+              if (f < 0) f = f + 180;
+              field = round(f * 8388607 / 90);
+          }
+          field = swap(field, (24+7)/8);
+          int2barr(*cargo, LATITUDE_OFFSET, &field, 0, 24);
+      }
+      
+      if (strcmp(app_fields->fields[i].name, LONGITUDE) == 0) {
+          field = 0;
+          if (strcmp(app_fields->fields[i].value, "n.a.") == 0) {
+              field = 0x1000000;
+          } else {
+              f = atof(app_fields->fields[i].value);
+              if (f < 0) f = f + 360;
+              field = round(f * 8388607 / 90);
+          }
+          field <<= 7;
+          field = swap(field, (25+7)/8);
+          int2barr(*cargo, LONGITUDE_OFFSET, &field, 0, 25); 
+      }
+      
+      if (strcmp(app_fields->fields[i].name, DEPTH) == 0) {
+          field = atoi(app_fields->fields[i].value);
+          field <<= 3;
+          field = swap(field, (13+7)/8);
+          int2barr(*cargo, DEPTH_OFFSET, &field, 0, 13);
+      }
+
+      if (strcmp(app_fields->fields[i].name, SPEED) == 0) {
+          f = atof(app_fields->fields[i].value);
+          field = round(f * 10);
+          field <<= 7;
+          field = swap(field, (9+7)/8);
+          int2barr(*cargo, SPEED_OFFSET, &field, 0, 9);
+      }
+  
+      if (strcmp(app_fields->fields[i].name, HEADING) == 0) {
+          f = atof(app_fields->fields[i].value);
+          if (strcmp(app_fields->fields[i].value, "n.a.") == 0) {
+              field = 511;
+          } else {
+              field = round(f / 0.705);
+              field <<= 7;
+          }
+          field = swap(field, (9+7)/8);
+          int2barr(*cargo, HEADING_OFFSET, &field, 0, 9);
+      }
+
+      if (strcmp(app_fields->fields[i].name, O2) == 0) {
+          f = atof(app_fields->fields[i].value);
+          if ( f >= 17 && f < 23.3) {
+              field = round((f - 17) * 10.0);
+          } else {
+              field = 63;
+          }
+          field <<= 2;
+          int2barr(*cargo, O2_OFFSET, &field, 0, 6);
+      }
+      
+      if (strcmp(app_fields->fields[i].name, CO2) == 0) {
+          f = atof(app_fields->fields[i].value);
+          field = round(f * 10);
+          field <<= 2;
+          int2barr(*cargo, CO2_OFFSET, &field, 0, 6);
+      }
+
+      if (strcmp(app_fields->fields[i].name, CO) == 0) {
+          field = atoi(app_fields->fields[i].value);
+          int2barr(*cargo, CO_OFFSET, &field, 0, 8);
+      }
+  
+      if (strcmp(app_fields->fields[i].name, H2) == 0) {
+          f = atof(app_fields->fields[i].value);
+          field = round(f * 10);
+          field <<= 2;
+          int2barr(*cargo, H2_OFFSET, &field, 0, 6);
+      }
+
+      if (strcmp(app_fields->fields[i].name, PRESSURE) == 0) {
+          f = atof(app_fields->fields[i].value);
+          if ( f >= 0.9 && f < 103.2) {
+              field = round((f - 0.9) * 10.0);
+          } else {
+              field = 1023;
+          }
+          field <<= 6;
+          field = swap(field, (10+7)/8);
+          int2barr(*cargo, PRESSURE_OFFSET, &field, 0, 10);
+      }
+  
+      if (strcmp(app_fields->fields[i].name, TEMPERATURE) == 0) {
+          field = atoi(app_fields->fields[i].value);
+          field <<= 2;
+          int2barr(*cargo, TEMPERATURE_OFFSET, &field, 0, 6);
+      }
+
+      if (strcmp(app_fields->fields[i].name, SURVIVORS) == 0) {
+          field = atoi(app_fields->fields[i].value);
+          int2barr(*cargo, SURVIVORS_OFFSET, &field, 0, 8);
+      }
+
+  }
   return 0;
 }
diff --git a/src/c/plugins/plugin_002_08.c b/src/c/plugins/plugin_002_08.c
index 43b53a1..e6d9572 100644
--- a/src/c/plugins/plugin_002_08.c
+++ b/src/c/plugins/plugin_002_08.c
@@ -15,7 +15,7 @@
 #define STATION_ID    "Station Identifier"
 #define CONTACT_TYPE  "Type"
 #define CONTACT_DEPTH "Depth"
-#define NoEC          "Number of Extra Contacts"
+#define NoEC          "Extra_Contacts"
 
 char *type_str(int contact_type)
 {
@@ -24,6 +24,21 @@ char *type_str(int contact_type)
     return ((contact_type < 10) ? type_str_[contact_type] : "n.a.");
 }
 
+int str_to_type(char *type_str)
+{
+    static char *type_str_[] ={"Nuclear submarine", "AIP submarine", "Conventional submarine",
+                               "AUV", "Ship", "Airplane", "UAV", "USV", "Buoy", "Bottom node"};
+    int i, vehicle_type = 15;
+
+    for (i = 0; i < 10; i++) {
+        if (strcmp(type_str, type_str_[i]) == 0) {
+            vehicle_type = i;
+            break;
+        }
+    }
+    return vehicle_type;
+}
+
 char *status_str(int status)
 {
     static char *status_str_[] = {
@@ -45,6 +60,35 @@ char *status_str(int status)
     return ((status < 15) ? status_str_[status] : "Undefined/default");
 }
 
+int str_to_status(char *status_str)
+{
+    static char *status_str_[] = {
+        "Under way - using engine",
+        "At anchor",
+        "Not under command",
+        "Restricted manoeuvrability",
+        "Constrained by draught",
+        "Moored",
+        "Aground",
+        "Engaged in fishin",
+        "Under way - sailing",
+        "For future use",
+        "For future use",
+        "Power-driven vessel towing astern",
+        "Power-driven vessel pushing ahead",
+        "For future use",
+        "AIS-SART"};
+    int i, status = 15;
+
+    for (i = 0; i < 15; i++) {
+        if (strcmp(status_str, status_str_[i]) == 0) {
+            status = i;
+            break;
+        }
+    }
+    return status;
+}
+
 uint32_t contact_depth(uint32_t depth)
 {
     if (depth < 700) {
@@ -60,6 +104,21 @@ uint32_t contact_depth(uint32_t depth)
     }
 }
 
+uint32_t encode_depth(uint32_t depth)
+{
+    if (depth < 700) {
+        return depth;
+    } else if (depth < 1000) {
+        return 700 + floor((depth - 700) * 1./10);
+    } else if (depth < 3000) {
+        return 730 + floor((depth - 1000) * 1./20);
+    } else if (depth < 6000) {
+        return 830 + floor((depth - 3000) * 1./25);
+    } else if (depth <= 11400) {
+        return 950 + floor((depth - 6000) * 1./75);
+    }
+}
+
 double contact_speed(uint32_t speed)
 {
     if (speed < 200) {
@@ -73,12 +132,29 @@ double contact_speed(uint32_t speed)
     }
 }
 
+uint32_t encode_speed(double speed)
+{
+    if (speed < 0) {
+        return 255;
+    } else if (speed < 20) {
+        return speed * 10;
+    } else if (speed < 70) {
+        return 200 + (speed - 20);
+    } else if (speed < 86) {
+        return 250 + (speed - 70.) / 5; 
+    } else {
+        return 254;
+    }
+}
+
+static janus_uint16_t contact_type, depth;
+
 JANUS_PLUGIN_EXPORT int
 app_data_decode(janus_uint64_t app_data, janus_uint8_t app_data_size, unsigned* cargo_size, janus_app_fields_t app_fields)
 {
   char value[16];
-  janus_uint8_t schedule, station_id, contact_type, depth, noc;
-  
+  janus_uint16_t schedule, station_id, noc;
+
   // Schedule (8 bits)
   schedule = (janus_uint8_t)((app_data >> 26) & (0xFFU));
   sprintf(value, "%u", schedule);
@@ -111,7 +187,47 @@ app_data_decode(janus_uint64_t app_data, janus_uint8_t app_data_size, unsigned*
 JANUS_PLUGIN_EXPORT int
 app_data_encode(unsigned desired_cargo_size, janus_app_fields_t app_fields, janus_uint8_t app_data_size, unsigned* cargo_size, janus_uint64_t* app_data)
 {
+  uint64_t field;
+  int i;
   *app_data = 0;
+  
+  // Cargo Size (9 bits).
+  /* *app_data = (desired_cargo_size & 0x1FFU); */
+  *cargo_size = desired_cargo_size;
+
+  for (i = 0; i != app_fields->field_count; ++i) {
+      if (strcmp(app_fields->fields[i].name, SCHEDULE) == 0) {
+          field = atoi(app_fields->fields[i].value) & 0xFFU;
+          field <<= 26;
+          *app_data |= field;
+      }
+      if (strcmp(app_fields->fields[i].name, STATION_ID) == 0) {
+          field = atoi(app_fields->fields[i].value) & 0xFFU;
+          field <<= 17;
+          *app_data |= field;
+      }
+      if (strcmp(app_fields->fields[i].name, NoEC) == 0) {
+          field = atoi(app_fields->fields[i].value) & 0x7U;
+          *app_data |= field;
+          printf("NoEC = %d\n", field);
+      }
+      if (i < 8) {
+          if (strcmp(app_fields->fields[i].name, CONTACT_TYPE) == 0) {
+              field = str_to_type(app_fields->fields[i].value);
+              field <<= 13;
+              *app_data |= field;
+          }
+          if (strcmp(app_fields->fields[i].name, CONTACT_DEPTH) == 0) {
+              if (strcmp(app_fields->fields[i].value, "n.a.") == 0) {
+                  field = 1023;
+              } else {
+                  field = encode_depth(atoi(app_fields->fields[i].value));
+              }
+              field <<= 3;
+              *app_data |= field;
+          }
+      }
+  }
 
   return 0;
 }
@@ -145,7 +261,7 @@ cargo_decode(janus_uint8_t* cargo, unsigned cargo_size, janus_app_fields_t* app_
           sprintf(value, "%u", contact_depth(field));
           janus_app_fields_add_field(*app_fields, CONTACT_DEPTH, value);
       }
-#define USERID "User ID"
+#define USERID "User_ID"
 #define USERID_OFFSET ((i > 0 ? (100 + 97 * (i - 1) + 14) : 0))
       field = 0;
       barr2int(cargo, USERID_OFFSET, &field, 0, 30);
@@ -188,7 +304,6 @@ cargo_decode(janus_uint8_t* cargo, unsigned cargo_size, janus_app_fields_t* app_
       barr2int(cargo, LONGITUDE_OFFSET, &field, 0, field_len);
       field = swap(field, (field_len+7)/8);
       field >>= (field_len % 8) ? 8 - (field_len % 8) : 0;
-      printf("lon field: %d\n", field);
       if (field == 0x1000000 || lon_flag) {
           sprintf(value, "n.a.");
           if (i == 0) {
@@ -223,13 +338,13 @@ cargo_decode(janus_uint8_t* cargo, unsigned cargo_size, janus_app_fields_t* app_
       }
       janus_app_fields_add_field(*app_fields, SPEED, value);
 
-#define NAVIGATIONAL_STATUS "Navigational Status"
+#define NAVIGATIONAL_STATUS "Navigation_Status"
 #define NAVIGATIONAL_STATUS_OFFSET ((i > 0 ? (100 + 97 * (i - 1) + 93) : 96))
       field = 0;
       barr2int(cargo, NAVIGATIONAL_STATUS_OFFSET, &field, 0, 4);
       status = field >> 4;
       
-#define TRUE_HEADING "True Heading"
+#define TRUE_HEADING "True_Heading"
 #define COG "CoG"
 #define COG_OFFSET ((i > 0 ? (100 + 97 * (i - 1) + 84) : 87))
       field = 0;
@@ -246,8 +361,10 @@ cargo_decode(janus_uint8_t* cargo, unsigned cargo_size, janus_app_fields_t* app_
       case 5: /* Moored */
       case 6: /* Aground */
           janus_app_fields_add_field(*app_fields, TRUE_HEADING, value);          
+          janus_app_fields_add_field(*app_fields, COG, "n.a.");          
           break;
       default:
+          janus_app_fields_add_field(*app_fields, TRUE_HEADING, "n.a.");          
           janus_app_fields_add_field(*app_fields, COG, value);
       }
 
@@ -255,12 +372,134 @@ cargo_decode(janus_uint8_t* cargo, unsigned cargo_size, janus_app_fields_t* app_
       janus_app_fields_add_field(*app_fields, NAVIGATIONAL_STATUS, value);
   }
   
-  printf("\n\nnoc: %d, cargo_size: %d\n\n", noc, cargo_size);
   return 0;
 }
 
 JANUS_PLUGIN_EXPORT int
 cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* cargo_size)
 {
+  uint32_t field;
+  double f;
+  unsigned i = 0, j = 0, field_len;
+  janus_uint8_t l1 = 0, l2 = 0;
+  uint8_t extra_contacts = 0;
+  double lat0 = 0, lon0 = 0, lat = 0, lon = 0;
+  janus_uint8_t lat_flag = 0, lon_flag = 0, status;
+  double th = 0, cog = 0;
+  
+  for (j = 0; j != app_fields->field_count; ++j) {
+      if (strcmp(app_fields->fields[j].name, NoEC) == 0) {
+          extra_contacts = atoi(app_fields->fields[j].value);
+      }
+  }
+  *cargo_size = (100 + 97 * extra_contacts + 16 + 7) / 8;
+  *cargo = JANUS_UTILS_MEMORY_REALLOC(*cargo, janus_uint8_t, *cargo_size);
+
+  for (j = 0; j != app_fields->field_count; ++j) {
+      if (i > 0) {
+          if (strcmp(app_fields->fields[j].name, CONTACT_TYPE) == 0) {
+              field = str_to_type(app_fields->fields[j].value);
+              field <<= 4;
+              int2barr(*cargo, TYPE_OFFSET, &field, 0, 4);
+          }
+          if (strcmp(app_fields->fields[j].name, CONTACT_DEPTH) == 0) {
+              if (strcmp(app_fields->fields[j].value, "n.a.") == 0) {
+                  field = 1023;
+              } else {
+                  field = encode_depth(atoi(app_fields->fields[j].value));
+              }
+              field <<= 6;
+              field = swap(field, (10+7)/8);
+              int2barr(*cargo, DEPTH_OFFSET, &field, 0, 10);
+          }
+      }
+      if (strcmp(app_fields->fields[j].name, USERID) == 0) {
+          field = atoi(app_fields->fields[j].value) & 0x3fffffffU;
+          field <<= 2;
+          field = swap(field, (30+7)/8);
+          int2barr(*cargo, USERID_OFFSET, &field, 0, 30);
+      }
+      if (strcmp(app_fields->fields[j].name, LATITUDE) == 0) {
+          if (strcmp(app_fields->fields[j].value, "n.a.") == 0 || lat_flag) {
+              if (i == 0) {
+                  lat_flag = 1;
+              }
+              field = 0x800000;
+          } else {
+              f = atof(app_fields->fields[j].value);
+              if (i == 0) {
+                  lat = lat0 = f;
+              } else {
+                  lat = f - lat0;
+              }
+              field = round(lat * 8388607 / 90);
+          }
+          field_len = i == 0 ? 24 : 16;
+          field = swap(field, (field_len+7)/8);
+          int2barr(*cargo, LATITUDE_OFFSET, &field, 0, field_len);
+      }
+
+      if (strcmp(app_fields->fields[j].name, LONGITUDE) == 0) {
+          if (strcmp(app_fields->fields[j].value, "n.a.") == 0 || lon_flag) {
+              if (i == 0) {
+                  lon_flag = 1;
+              }
+              field = 0x1000000;
+          } else {
+              f = atof(app_fields->fields[j].value);
+              if (i == 0) {
+                  lon = lon0 = f;
+              } else {
+                  lon = f - lon0;
+              }
+              field = round(lon * 8388607 / 90);
+          }
+          printf("f = %f, field = %d\n", f, field);
+          field_len = i == 0 ? 25 : 16;
+          field <<= (field_len % 8) ? 8 - (field_len % 8) : 0;
+          field = swap(field, (field_len+7)/8);
+          int2barr(*cargo, LONGITUDE_OFFSET, &field, 0, field_len);
+      }
+
+      if (strcmp(app_fields->fields[j].name, TRUE_HEADING) == 0) {
+          th = atof(app_fields->fields[j].value);
+      }
+
+      if (strcmp(app_fields->fields[j].name, COG) == 0) {
+          cog = atof(app_fields->fields[j].value);
+      }
+
+      if (strcmp(app_fields->fields[j].name, SPEED) == 0) {
+          if (strcmp(app_fields->fields[j].value, "n.a.") == 0) {
+              field = 255;
+          } else if (strcmp(app_fields->fields[j].value, ">= 86") == 0) {
+              field = 254;
+          } else {
+              field = encode_speed(atof(app_fields->fields[j].value));
+          }
+          int2barr(*cargo, SPEED_OFFSET, &field, 0, 8);
+      }      
+      
+      if (strcmp(app_fields->fields[j].name, NAVIGATIONAL_STATUS) == 0) {
+          field = status = str_to_status(app_fields->fields[j].value);
+          field <<= 4;
+          int2barr(*cargo, NAVIGATIONAL_STATUS_OFFSET, &field, 0, 4);
+          switch (status) {
+          case 1: /* At anchor */
+          case 5: /* Moored */
+          case 6: /* Aground */
+              field = round(th/0.705);
+              break;
+          default:
+              field = round(cog/0.705);
+          }
+          if (field < 0 || field > 511) field = 511;
+          field <<= 7;
+          field = swap(field, (9+7)/8);
+          int2barr(*cargo, COG_OFFSET, &field, 0, 9);
+          
+          i++;
+      }
+  }
   return 0;
 }
diff --git a/src/c/plugins/plugin_016_01.c b/src/c/plugins/plugin_016_01.c
index 068f3e9..5017c61 100644
--- a/src/c/plugins/plugin_016_01.c
+++ b/src/c/plugins/plugin_016_01.c
@@ -2,17 +2,18 @@
 #include <stdlib.h>
 #include <string.h>
 #include <stdio.h>
+#include <stdint.h>
 
 // JANUS headers.
 #include <janus/defaults.h>
 #include <janus/codec/codec.h>
 #include <janus/error.h>
 
-#define STATION_ID_LABEL "Station Identifier"
-#define DESTINATION_ID_LABEL "Destination Identifier"
+#define STATION_ID_LABEL "Station_Identifier"
+#define DESTINATION_ID_LABEL "Destination_Identifier"
 #define ACK_REQUEST_LABEL "Ack_Request"
 
-#define PAYLOAD_SIZE_LABEL "Payload Size"
+#define PAYLOAD_SIZE_LABEL "Payload_Size"
 #define PAYLOAD_LABEL "Payload"
 
 static inline void
@@ -78,6 +79,32 @@ app_data_decode(janus_uint64_t app_data, janus_uint8_t app_data_size, unsigned*
 JANUS_PLUGIN_EXPORT int
 app_data_encode(unsigned desired_cargo_size, janus_app_fields_t app_fields, janus_uint8_t app_data_size, unsigned* cargo_size, janus_uint64_t* app_data)
 {
+  uint16_t field;
+  int i;
+  *app_data = 0;
+  
+  // Cargo Size (8 bits).
+  *app_data = (desired_cargo_size & 0xFFU);
+  *cargo_size = desired_cargo_size;
+
+  for (i = 0; i != app_fields->field_count; ++i) {
+      if (strcmp(app_fields->fields[i].name, STATION_ID_LABEL) == 0) {
+          field = atoi(app_fields->fields[i].value) & 0xFFU;
+          field <<= 18;
+          *app_data |= field;
+      }
+      if (strcmp(app_fields->fields[i].name, DESTINATION_ID_LABEL) == 0) {
+          field = atoi(app_fields->fields[i].value) & 0xFFU;
+          field <<= 10;
+          *app_data |= field;
+      }
+      if (strcmp(app_fields->fields[i].name, ACK_REQUEST_LABEL) == 0) {
+          field = atoi(app_fields->fields[i].value) & 0x1U;
+          field <<= 9;
+          *app_data |= field;
+      }
+  }
+  
   return 0;
 }
 
@@ -105,5 +132,42 @@ cargo_decode(janus_uint8_t* cargo, unsigned cargo_size, janus_app_fields_t* app_
 JANUS_PLUGIN_EXPORT int
 cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* cargo_size)
 {
-  return 0;
+  int rv = JANUS_ERROR_FIELDS;
+  int cargo_size_found = 0;
+
+  unsigned i;
+  for (i = 0; i != app_fields->field_count; ++i)
+  {
+    if (strcmp(app_fields->fields[i].name, PAYLOAD_SIZE_LABEL) == 0)
+    {
+      *cargo_size = atoi(app_fields->fields[i].value);
+      cargo_size_found = 1;
+      break;
+    }
+  }
+  for (i = 0; i != app_fields->field_count; ++i)
+  {
+    if (strcmp(app_fields->fields[i].name, PAYLOAD_LABEL) == 0)
+    {
+      if (! cargo_size_found)
+      {
+        *cargo_size = strlen(app_fields->fields[i].value);
+      }
+      if (*cargo_size > JANUS_MAX_PKT_CARGO_SIZE)
+      {
+        return JANUS_ERROR_CARGO_SIZE;
+      }
+      
+      *cargo = JANUS_UTILS_MEMORY_REALLOC(*cargo, janus_uint8_t, *cargo_size);
+      memcpy(*cargo, app_fields->fields[i].value, *cargo_size * sizeof(janus_uint8_t));
+      
+      rv = 0;
+      
+      break;
+    }
+  }
+  if (*cargo_size == 0)
+    return 0;
+  else
+    return rv;
 }
-- 
2.24.0


From fbc9c591bd682f1cee3857c31621791cbf3767cd Mon Sep 17 00:00:00 2001
From: Oleksiy Kebkal <lesha@evologics.de>
Date: Tue, 12 Nov 2019 14:12:22 +0100
Subject: [PATCH 14/18] exit on invalid crc

---
 src/c/janus/rx.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/src/c/janus/rx.c b/src/c/janus/rx.c
index c85b2e5..08bc3cc 100644
--- a/src/c/janus/rx.c
+++ b/src/c/janus/rx.c
@@ -260,6 +260,8 @@ rx_data(janus_rx_t rx, janus_packet_t packet, janus_rx_state_t state)
 
         janus_rx_state_dump(state);
         janus_packet_dump(packet);
+        if (rx->rx_once && rx->skip_detection)
+            exit(1);
       }
 
       janus_packet_reset(packet);
-- 
2.24.0


From 89b936d53de79dbc9c4a419a767827b4ed47731b Mon Sep 17 00:00:00 2001
From: Maksym Komar <komar@evologics.de>
Date: Fri, 29 Nov 2019 11:27:36 +0100
Subject: [PATCH 15/18] Add Payload CRC support to plugings

---
 src/c/janus/msb.h             |  1 +
 src/c/plugins/plugin_000_01.c | 19 +++++++++++++++++++
 src/c/plugins/plugin_000_02.c | 20 ++++++++++++++++++++
 src/c/plugins/plugin_000_03.c | 20 ++++++++++++++++++++
 src/c/plugins/plugin_002_08.c | 20 ++++++++++++++++++++
 src/c/plugins/plugin_016_01.c | 29 ++++++++++++++++++++++++++---
 6 files changed, 106 insertions(+), 3 deletions(-)

diff --git a/src/c/janus/msb.h b/src/c/janus/msb.h
index 58dfb55..6cc582f 100644
--- a/src/c/janus/msb.h
+++ b/src/c/janus/msb.h
@@ -11,6 +11,7 @@
 #define BARR_CLEAR(barr, N) (((char*)(barr))[BARR_ELNUM(N)] &= ~(0x080 >> BARR_BITNUM(N)))
 #define BARR_FLIP(barr, N) (((char*)(barr))[BARR_ELNUM(N)] ^= 0x080 >> BARR_BITNUM(N))
 #define BARR_TEST(barr, N) (((char*)(barr))[BARR_ELNUM(N)] & (0x080 >> BARR_BITNUM(N)))
+#define SWAP32_BY_BITSIZE(data, bit_size) swap((data), ((bit_size) + 7) / 8)
 
 int int2barr(char *barr, int offset, void *val, unsigned int l, unsigned int h);
 int barr2int(char *barr, int offset, void *val, unsigned int l, unsigned int h);
diff --git a/src/c/plugins/plugin_000_01.c b/src/c/plugins/plugin_000_01.c
index 0ef2162..a9a4cc2 100644
--- a/src/c/plugins/plugin_000_01.c
+++ b/src/c/plugins/plugin_000_01.c
@@ -9,9 +9,15 @@
 #include <janus/defaults.h>
 #include <janus/codec/codec.h>
 #include <janus/error.h>
+#include <janus/crc.h>
 
 #include <janus/msb.h>
 
+#define CRC_NAME "Cargo CRC Validity"
+/* By specification */
+/* #define CRC_OFFSET (90) */
+#define CRC_OFFSET (96)
+
 #define SCHEDULE "Schedule"
 #define STATION_ID "Station Identifier"
 #define DESTINATION_ID "Destination Identifier"
@@ -79,11 +85,21 @@ cargo_decode(janus_uint8_t* cargo, unsigned cargo_size, janus_app_fields_t* app_
 {
   char value[32];
   janus_uint32_t field = 0;
+  janus_uint16_t crc;
   janus_uint8_t l1 = 0, l2 = 0;
   double lat, lon;
 
 #define NATIONALITY   "Nationality"
 #define NATIONALITY_OFFSET (0)
+  field = janus_crc_16(cargo, cargo_size - 2, 0);
+  field = SWAP32_BY_BITSIZE(field, 16);
+  barr2int(cargo, CRC_OFFSET, &crc, 0, 16);
+
+  if (crc != field) {
+      janus_app_fields_add_field(*app_fields, CRC_NAME, "0");
+      return -1;
+  }
+  janus_app_fields_add_field(*app_fields, CRC_NAME, "1");
 
   barr2int(cargo, NATIONALITY_OFFSET, &l1, 0, 5); l1 >>= 3;
   barr2int(cargo, NATIONALITY_OFFSET + 5, &l2, 0, 5); l2 >>= 3;
@@ -230,5 +246,8 @@ cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* car
           int2barr(*cargo, HEADING_OFFSET, &field, 0, 9);
       }
   }
+  field = janus_crc_16(*cargo, (*cargo_size) - sizeof(janus_uint16_t), 0);
+  field = SWAP32_BY_BITSIZE(field, 16);
+  int2barr(*cargo, CRC_OFFSET, &field, 0, 16);
   return 0;
 }
diff --git a/src/c/plugins/plugin_000_02.c b/src/c/plugins/plugin_000_02.c
index f057fef..04107b5 100644
--- a/src/c/plugins/plugin_000_02.c
+++ b/src/c/plugins/plugin_000_02.c
@@ -8,9 +8,15 @@
 #include <janus/defaults.h>
 #include <janus/codec/codec.h>
 #include <janus/error.h>
+#include <janus/crc.h>
 
 #include <janus/msb.h>
 
+#define CRC_NAME "Cargo CRC Validity"
+/* By specification */
+/* #define CRC_OFFSET (60) */
+#define CRC_OFFSET (64)
+
 #define SCHEDULE "Schedule"
 #define STATION_ID "Station Identifier"
 #define DESTINATION_ID "Destination Identifier"
@@ -78,11 +84,21 @@ cargo_decode(janus_uint8_t* cargo, unsigned cargo_size, janus_app_fields_t* app_
 {
   char value[32];
   janus_uint32_t field = 0;
+  janus_uint16_t crc;
   janus_uint8_t l1 = 0, l2 = 0;
   double lon;
 
 #define NATIONALITY        "Nationality"
 #define NATIONALITY_OFFSET (0)
+  field = janus_crc_16(cargo, cargo_size - 2, 0);
+  field = SWAP32_BY_BITSIZE(field, 16);
+  barr2int(cargo, CRC_OFFSET, &crc, 0, 16);
+
+  if (crc != field) {
+      janus_app_fields_add_field(*app_fields, CRC_NAME, "0");
+      return -1;
+  }
+  janus_app_fields_add_field(*app_fields, CRC_NAME, "1");
 
   barr2int(cargo, NATIONALITY_OFFSET, &l1, 0, 5); l1 >>= 3;
   barr2int(cargo, NATIONALITY_OFFSET + 5, &l2, 0, 5); l2 >>= 3;
@@ -226,5 +242,9 @@ cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* car
           int2barr(*cargo, SURVIVORS_OFFSET, &field, 0, 8);
       }
   }
+
+  field = janus_crc_16(*cargo, (*cargo_size) - sizeof(janus_uint16_t), 0);
+  field = SWAP32_BY_BITSIZE(field, 16);
+  int2barr(*cargo, CRC_OFFSET, &field, 0, 16);
   return 0;
 }
diff --git a/src/c/plugins/plugin_000_03.c b/src/c/plugins/plugin_000_03.c
index 726a893..9043b57 100644
--- a/src/c/plugins/plugin_000_03.c
+++ b/src/c/plugins/plugin_000_03.c
@@ -8,9 +8,15 @@
 #include <janus/defaults.h>
 #include <janus/codec/codec.h>
 #include <janus/error.h>
+#include <janus/crc.h>
 
 #include <janus/msb.h>
 
+#define CRC_NAME "Cargo CRC Validity"
+/* By specification */
+/* #define CRC_OFFSET (140) */
+#define CRC_OFFSET (144)
+
 #define SCHEDULE "Schedule"
 #define STATION_ID "Station Identifier"
 #define DESTINATION_ID "Destination Identifier"
@@ -78,11 +84,21 @@ cargo_decode(janus_uint8_t* cargo, unsigned cargo_size, janus_app_fields_t* app_
 {
   char value[32];
   janus_uint32_t field = 0;
+  janus_uint16_t crc;
   janus_uint8_t l1 = 0, l2 = 0;
   double lat, lon;
 
 #define NATIONALITY   "Nationality"
 #define NATIONALITY_OFFSET (0)
+  field = janus_crc_16(cargo, cargo_size - 2, 0);
+  field = SWAP32_BY_BITSIZE(field, 16);
+  barr2int(cargo, CRC_OFFSET, &crc, 0, 16);
+
+  if (crc != field) {
+      janus_app_fields_add_field(*app_fields, CRC_NAME, "0");
+      return -1;
+  }
+  janus_app_fields_add_field(*app_fields, CRC_NAME, "1");
 
   barr2int(cargo, NATIONALITY_OFFSET, &l1, 0, 5); l1 >>= 3;
   barr2int(cargo, NATIONALITY_OFFSET + 5, &l2, 0, 5); l2 >>= 3;
@@ -345,5 +361,9 @@ cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* car
       }
 
   }
+
+  field = janus_crc_16(*cargo, (*cargo_size) - sizeof(janus_uint16_t), 0);
+  field = SWAP32_BY_BITSIZE(field, 16);
+  int2barr(*cargo, CRC_OFFSET, &field, 0, 16);
   return 0;
 }
diff --git a/src/c/plugins/plugin_002_08.c b/src/c/plugins/plugin_002_08.c
index e6d9572..902441d 100644
--- a/src/c/plugins/plugin_002_08.c
+++ b/src/c/plugins/plugin_002_08.c
@@ -8,9 +8,12 @@
 #include <janus/defaults.h>
 #include <janus/codec/codec.h>
 #include <janus/error.h>
+#include <janus/crc.h>
 
 #include <janus/msb.h>
 
+#define CRC_NAME "Cargo CRC Validity"
+
 #define SCHEDULE      "Schedule"
 #define STATION_ID    "Station Identifier"
 #define CONTACT_TYPE  "Type"
@@ -116,6 +119,8 @@ uint32_t encode_depth(uint32_t depth)
         return 830 + floor((depth - 3000) * 1./25);
     } else if (depth <= 11400) {
         return 950 + floor((depth - 6000) * 1./75);
+    } else {
+       return 1022;
     }
 }
 
@@ -237,10 +242,21 @@ cargo_decode(janus_uint8_t* cargo, unsigned cargo_size, janus_app_fields_t* app_
 {
   char value[32];
   janus_uint32_t field = 0;
+  janus_uint16_t crc;
   janus_uint8_t i, noc, field_len, status;
   double lat0, lon0, lat, lon;
   janus_uint8_t lat_flag = 0, lon_flag = 0;
 
+  field = janus_crc_16(cargo, cargo_size - 2, 0);
+  field = SWAP32_BY_BITSIZE(field, 16);
+  barr2int(cargo, (cargo_size - sizeof(janus_uint16_t)) * 8, &crc, 0, 16);
+
+  if (crc != field) {
+      janus_app_fields_add_field(*app_fields, CRC_NAME, "0");
+      return -1;
+  }
+  janus_app_fields_add_field(*app_fields, CRC_NAME, "1");
+
   noc = (cargo_size * 8) / 97;
  
   for (i = 0; i < noc; i++) {
@@ -501,5 +517,9 @@ cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* car
           i++;
       }
   }
+
+  field = janus_crc_16(*cargo, (*cargo_size) - sizeof(janus_uint16_t), 0);
+  field = SWAP32_BY_BITSIZE(field, 16);
+  int2barr(*cargo, (*cargo_size - sizeof(janus_uint16_t)) * 8, &field, 0, 16);
   return 0;
 }
diff --git a/src/c/plugins/plugin_016_01.c b/src/c/plugins/plugin_016_01.c
index 5017c61..c3e859c 100644
--- a/src/c/plugins/plugin_016_01.c
+++ b/src/c/plugins/plugin_016_01.c
@@ -8,6 +8,11 @@
 #include <janus/defaults.h>
 #include <janus/codec/codec.h>
 #include <janus/error.h>
+#include <janus/crc.h>
+
+#include <janus/msb.h>
+
+#define CRC_NAME "Cargo CRC Validity"
 
 #define STATION_ID_LABEL "Station_Identifier"
 #define DESTINATION_ID_LABEL "Destination_Identifier"
@@ -79,7 +84,7 @@ app_data_decode(janus_uint64_t app_data, janus_uint8_t app_data_size, unsigned*
 JANUS_PLUGIN_EXPORT int
 app_data_encode(unsigned desired_cargo_size, janus_app_fields_t app_fields, janus_uint8_t app_data_size, unsigned* cargo_size, janus_uint64_t* app_data)
 {
-  uint16_t field;
+  uint64_t field;
   int i;
   *app_data = 0;
   
@@ -113,6 +118,18 @@ cargo_decode(janus_uint8_t* cargo, unsigned cargo_size, janus_app_fields_t* app_
 {
   int rv = 0;
   int payload_size = cargo_size - 2;
+  janus_uint32_t field = 0;
+  janus_uint16_t crc;
+
+  field = janus_crc_16(cargo, cargo_size - 2, 0);
+  field = SWAP32_BY_BITSIZE(field, 16);
+  barr2int(cargo, (cargo_size - sizeof(janus_uint16_t)) * 8, &crc, 0, 16);
+
+  if (crc != field) {
+      janus_app_fields_add_field(*app_fields, CRC_NAME, "0");
+      return -1;
+  }
+  janus_app_fields_add_field(*app_fields, CRC_NAME, "1");
 
   if (*app_fields == 0)
   {
@@ -134,6 +151,7 @@ cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* car
 {
   int rv = JANUS_ERROR_FIELDS;
   int cargo_size_found = 0;
+  janus_uint32_t field = 0;
 
   unsigned i;
   for (i = 0; i != app_fields->field_count; ++i)
@@ -168,6 +186,11 @@ cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* car
   }
   if (*cargo_size == 0)
     return 0;
-  else
-    return rv;
+  *cargo_size += sizeof(uint16_t);
+  *cargo = JANUS_UTILS_MEMORY_REALLOC(*cargo, janus_uint8_t, *cargo_size);
+  field = janus_crc_16(*cargo, (*cargo_size) - sizeof(janus_uint16_t), 0);
+  field = SWAP32_BY_BITSIZE(field, 16);
+  memcpy(*cargo + *cargo_size * sizeof(janus_uint8_t) - 2, &field, 2);
+
+  return rv;
 }
-- 
2.24.0


From b0023fe16ea3af51ff6babebaae26fe553ae0f1d Mon Sep 17 00:00:00 2001
From: Maksym Komar <komar@evologics.de>
Date: Fri, 29 Nov 2019 11:32:37 +0100
Subject: [PATCH 16/18] Fix in plugins Longtitude and Latitude transformation

---
 src/c/plugins/plugin_000_01.c | 12 ++++++++----
 src/c/plugins/plugin_000_03.c | 12 ++++++++----
 2 files changed, 16 insertions(+), 8 deletions(-)

diff --git a/src/c/plugins/plugin_000_01.c b/src/c/plugins/plugin_000_01.c
index a9a4cc2..2129f70 100644
--- a/src/c/plugins/plugin_000_01.c
+++ b/src/c/plugins/plugin_000_01.c
@@ -198,8 +198,10 @@ cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* car
               field = 0x800000;
           } else {
               f = atof(app_fields->fields[i].value);
-              if (f < 0) f = f + 180;
-              field = round(f * 8388607 / 90);
+              if (f < 0)
+                  field = -round(-f * 8388607 / 90);
+              else
+                  field = round(f * 8388607 / 90);
           }
           field = swap(field, (24+7)/8);
           int2barr(*cargo, LATITUDE_OFFSET, &field, 0, 24);
@@ -211,8 +213,10 @@ cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* car
               field = 0x1000000;
           } else {
               f = atof(app_fields->fields[i].value);
-              if (f < 0) f = f + 360;
-              field = round(f * 8388607 / 90);
+              if (f < 0)
+                  field = -round(-f * 8388607 / 90);
+              else
+                  field = round(f * 8388607 / 90);
           }
           field <<= 7;
           field = swap(field, (25+7)/8);
diff --git a/src/c/plugins/plugin_000_03.c b/src/c/plugins/plugin_000_03.c
index 9043b57..0546f1f 100644
--- a/src/c/plugins/plugin_000_03.c
+++ b/src/c/plugins/plugin_000_03.c
@@ -259,8 +259,10 @@ cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* car
               field = 0x800000;
           } else {
               f = atof(app_fields->fields[i].value);
-              if (f < 0) f = f + 180;
-              field = round(f * 8388607 / 90);
+              if (f < 0)
+                  field = -round(-f * 8388607 / 90);
+              else
+                  field = round(f * 8388607 / 90);
           }
           field = swap(field, (24+7)/8);
           int2barr(*cargo, LATITUDE_OFFSET, &field, 0, 24);
@@ -272,8 +274,10 @@ cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* car
               field = 0x1000000;
           } else {
               f = atof(app_fields->fields[i].value);
-              if (f < 0) f = f + 360;
-              field = round(f * 8388607 / 90);
+              if (f < 0)
+                  field = -round(-f * 8388607 / 90);
+              else
+                  field = round(f * 8388607 / 90);
           }
           field <<= 7;
           field = swap(field, (25+7)/8);
-- 
2.24.0


From 10946aa700af534c69485dc5328a9cd235adbd90 Mon Sep 17 00:00:00 2001
From: Maksym Komar <komar@evologics.de>
Date: Fri, 29 Nov 2019 11:35:35 +0100
Subject: [PATCH 17/18] Fix in plugins Station_Identifier to one format

---
 src/c/plugins/plugin_000_01.c | 4 ++--
 src/c/plugins/plugin_000_02.c | 4 ++--
 src/c/plugins/plugin_000_03.c | 4 ++--
 src/c/plugins/plugin_002_08.c | 4 ++--
 src/c/plugins/plugin_016_00.c | 6 +++---
 src/c/plugins/plugin_016_01.c | 2 +-
 tests/c/packet.c              | 2 +-
 7 files changed, 13 insertions(+), 13 deletions(-)

diff --git a/src/c/plugins/plugin_000_01.c b/src/c/plugins/plugin_000_01.c
index 2129f70..5e21821 100644
--- a/src/c/plugins/plugin_000_01.c
+++ b/src/c/plugins/plugin_000_01.c
@@ -19,7 +19,7 @@
 #define CRC_OFFSET (96)
 
 #define SCHEDULE "Schedule"
-#define STATION_ID "Station Identifier"
+#define STATION_ID "Station_Identifier"
 #define DESTINATION_ID "Destination Identifier"
 
 JANUS_PLUGIN_EXPORT int
@@ -33,7 +33,7 @@ app_data_decode(janus_uint64_t app_data, janus_uint8_t app_data_size, unsigned*
   sprintf(value, "%u", schedule);
   janus_app_fields_add_field(app_fields, SCHEDULE, value);
 
-  // Station Identifier (8 bits)
+  // Station_Identifier (8 bits)
   station_id = (janus_uint8_t)((app_data >> 17) & (0xFFU));
   sprintf(value, "%u", station_id);
   janus_app_fields_add_field(app_fields, STATION_ID, value);
diff --git a/src/c/plugins/plugin_000_02.c b/src/c/plugins/plugin_000_02.c
index 04107b5..d3c65f2 100644
--- a/src/c/plugins/plugin_000_02.c
+++ b/src/c/plugins/plugin_000_02.c
@@ -18,7 +18,7 @@
 #define CRC_OFFSET (64)
 
 #define SCHEDULE "Schedule"
-#define STATION_ID "Station Identifier"
+#define STATION_ID "Station_Identifier"
 #define DESTINATION_ID "Destination Identifier"
 
 JANUS_PLUGIN_EXPORT int
@@ -32,7 +32,7 @@ app_data_decode(janus_uint64_t app_data, janus_uint8_t app_data_size, unsigned*
   sprintf(value, "%u", schedule);
   janus_app_fields_add_field(app_fields, SCHEDULE, value);
 
-  // Station Identifier (8 bits)
+  // Station_Identifier (8 bits)
   station_id = (janus_uint8_t)((app_data >> 17) & (0xFFU));
   sprintf(value, "%u", station_id);
   janus_app_fields_add_field(app_fields, STATION_ID, value);
diff --git a/src/c/plugins/plugin_000_03.c b/src/c/plugins/plugin_000_03.c
index 0546f1f..4243e1e 100644
--- a/src/c/plugins/plugin_000_03.c
+++ b/src/c/plugins/plugin_000_03.c
@@ -18,7 +18,7 @@
 #define CRC_OFFSET (144)
 
 #define SCHEDULE "Schedule"
-#define STATION_ID "Station Identifier"
+#define STATION_ID "Station_Identifier"
 #define DESTINATION_ID "Destination Identifier"
 
 JANUS_PLUGIN_EXPORT int
@@ -32,7 +32,7 @@ app_data_decode(janus_uint64_t app_data, janus_uint8_t app_data_size, unsigned*
   sprintf(value, "%u", schedule);
   janus_app_fields_add_field(app_fields, SCHEDULE, value);
 
-  // Station Identifier (8 bits)
+  // Station_Identifier (8 bits)
   station_id = (janus_uint8_t)((app_data >> 17) & (0xFFU));
   sprintf(value, "%u", station_id);
   janus_app_fields_add_field(app_fields, STATION_ID, value);
diff --git a/src/c/plugins/plugin_002_08.c b/src/c/plugins/plugin_002_08.c
index 902441d..0ae0f08 100644
--- a/src/c/plugins/plugin_002_08.c
+++ b/src/c/plugins/plugin_002_08.c
@@ -15,7 +15,7 @@
 #define CRC_NAME "Cargo CRC Validity"
 
 #define SCHEDULE      "Schedule"
-#define STATION_ID    "Station Identifier"
+#define STATION_ID    "Station_Identifier"
 #define CONTACT_TYPE  "Type"
 #define CONTACT_DEPTH "Depth"
 #define NoEC          "Extra_Contacts"
@@ -165,7 +165,7 @@ app_data_decode(janus_uint64_t app_data, janus_uint8_t app_data_size, unsigned*
   sprintf(value, "%u", schedule);
   janus_app_fields_add_field(app_fields, SCHEDULE, value);
 
-  // Station Identifier (8 bits)
+  // Station_Identifier (8 bits)
   station_id = (janus_uint8_t)((app_data >> 17) & (0xFFU));
   sprintf(value, "%u", station_id);
   janus_app_fields_add_field(app_fields, STATION_ID, value);
diff --git a/src/c/plugins/plugin_016_00.c b/src/c/plugins/plugin_016_00.c
index 6cad451..a66ef05 100644
--- a/src/c/plugins/plugin_016_00.c
+++ b/src/c/plugins/plugin_016_00.c
@@ -31,7 +31,7 @@
 #include <janus/codec/codec.h>
 #include <janus/error.h>
 
-#define STATION_ID_LABEL "Station Identifier"
+#define STATION_ID_LABEL "Station_Identifier"
 #define PSET_ID_LABEL "Parameter Set Identifier"
 #define PAYLOAD_SIZE_LABEL "Payload Size"
 #define PAYLOAD_LABEL "Payload"
@@ -136,7 +136,7 @@ app_fields_encode_cargo_size(janus_uint64_t* app_data, unsigned desired_cargo_si
 JANUS_PLUGIN_EXPORT int
 app_data_decode(janus_uint64_t app_data, janus_uint8_t app_data_size, unsigned* cargo_size, janus_app_fields_t app_fields)
 {
-  // Station Identifier (8 bits).
+  // Station_Identifier (8 bits).
   app_data_decode_station_id(app_data, app_fields);
 
   // Parameter Set Identifier (12 bits).
@@ -167,7 +167,7 @@ app_data_encode(unsigned desired_cargo_size, janus_app_fields_t app_fields, janu
     {
       if (strcmp(app_fields->fields[i].name, STATION_ID_LABEL) == 0)
       {
-        // Station Identifier (8 bits).
+        // Station_Identifier (8 bits).
         app_fields_encode_station_id(app_data, app_fields->fields + i);
       }
       else if (strcmp(app_fields->fields[i].name, PSET_ID_LABEL) == 0)
diff --git a/src/c/plugins/plugin_016_01.c b/src/c/plugins/plugin_016_01.c
index c3e859c..964d931 100644
--- a/src/c/plugins/plugin_016_01.c
+++ b/src/c/plugins/plugin_016_01.c
@@ -66,7 +66,7 @@ app_data_decode_cargo_size(janus_uint64_t app_data)
 JANUS_PLUGIN_EXPORT int
 app_data_decode(janus_uint64_t app_data, janus_uint8_t app_data_size, unsigned* cargo_size, janus_app_fields_t app_fields)
 {
-  // Station Identifier (8 bits).
+  // Station_Identifier (8 bits).
   app_data_decode_station_id(app_data, app_fields);
 
   // Destination Identifier (8 bits).
diff --git a/tests/c/packet.c b/tests/c/packet.c
index 0117ce1..45cead2 100644
--- a/tests/c/packet.c
+++ b/tests/c/packet.c
@@ -38,7 +38,7 @@ main(int argc, char** argv)
   janus_packet_t pkt = 0;
 
   janus_app_fields_t app_data_fields = janus_app_fields_new();
-  janus_app_fields_add_field(app_data_fields, "Station Identifier", "85");
+  janus_app_fields_add_field(app_data_fields, "Station_Identifier", "85");
   janus_app_fields_add_field(app_data_fields, "Parameter Set Identifier", "1");
 
   for (i = 0; i < desired_cargo_size; i += 10)
-- 
2.24.0


From c201ab2609903c1ead97f5efe072a9d8c3bddf48 Mon Sep 17 00:00:00 2001
From: Maksym Komar <komar@evologics.de>
Date: Fri, 29 Nov 2019 17:12:52 +0100
Subject: [PATCH 18/18] Refactor fields name macroses in pluging

---
 src/c/plugins/plugin_000_01.c |  65 ++++++++--------
 src/c/plugins/plugin_000_02.c |  79 +++++++++----------
 src/c/plugins/plugin_000_03.c | 133 ++++++++++++++++----------------
 src/c/plugins/plugin_002_08.c | 141 ++++++++++++++++++----------------
 4 files changed, 214 insertions(+), 204 deletions(-)

diff --git a/src/c/plugins/plugin_000_01.c b/src/c/plugins/plugin_000_01.c
index 5e21821..a5501a7 100644
--- a/src/c/plugins/plugin_000_01.c
+++ b/src/c/plugins/plugin_000_01.c
@@ -18,6 +18,24 @@
 /* #define CRC_OFFSET (90) */
 #define CRC_OFFSET (96)
 
+#define NATIONALITY_NAME   "Nationality"
+#define NATIONALITY_OFFSET (0)
+
+#define LATITUDE_NAME "Latitude"
+#define LATITUDE_OFFSET (10)
+
+#define LONGITUDE_NAME "Longitude"
+#define LONGITUDE_OFFSET (34)
+
+#define DEPTH_NAME "Depth"
+#define DEPTH_OFFSET (59)
+
+#define SPEED_NAME "Speed"
+#define SPEED_OFFSET (72)
+
+#define HEADING_NAME "Heading"
+#define HEADING_OFFSET (81)
+
 #define SCHEDULE "Schedule"
 #define STATION_ID "Station_Identifier"
 #define DESTINATION_ID "Destination Identifier"
@@ -89,8 +107,6 @@ cargo_decode(janus_uint8_t* cargo, unsigned cargo_size, janus_app_fields_t* app_
   janus_uint8_t l1 = 0, l2 = 0;
   double lat, lon;
 
-#define NATIONALITY   "Nationality"
-#define NATIONALITY_OFFSET (0)
   field = janus_crc_16(cargo, cargo_size - 2, 0);
   field = SWAP32_BY_BITSIZE(field, 16);
   barr2int(cargo, CRC_OFFSET, &crc, 0, 16);
@@ -104,24 +120,18 @@ cargo_decode(janus_uint8_t* cargo, unsigned cargo_size, janus_app_fields_t* app_
   barr2int(cargo, NATIONALITY_OFFSET, &l1, 0, 5); l1 >>= 3;
   barr2int(cargo, NATIONALITY_OFFSET + 5, &l2, 0, 5); l2 >>= 3;
   sprintf(value, "%c%c", 'A' + l1 - 1, 'A' + l2 - 1);
-  janus_app_fields_add_field(*app_fields, NATIONALITY, value);
+  janus_app_fields_add_field(*app_fields, NATIONALITY_NAME, value);
 
-#define LATITUDE "Latitude"
-#define LATITUDE_OFFSET (10)
-  
   barr2int(cargo, LATITUDE_OFFSET, &field, 0, 24);
   field = swap(field, (24+7)/8);
   if (field == 0x800000) {
       sprintf(value, "n.a.");
   } else {
-      lat = (double)(field*90)/8388607;
+      lat = (double)(field*90)/8388607L;
       if (lat > 90) lat = lat - 180;
       sprintf(value, "%f", lat);
   }
-  janus_app_fields_add_field(*app_fields, LATITUDE, value);
-
-#define LONGITUDE "Longitude"
-#define LONGITUDE_OFFSET (34)
+  janus_app_fields_add_field(*app_fields, LATITUDE_NAME, value);
 
   barr2int(cargo, LONGITUDE_OFFSET, &field, 0, 25); 
   field = swap(field, (25+7)/8);
@@ -130,34 +140,25 @@ cargo_decode(janus_uint8_t* cargo, unsigned cargo_size, janus_app_fields_t* app_
       sprintf(value, "n.a.");
   } else {
       /* field -= 4; */
-      lon = (double)(field*90)/8388607;
+      lon = (double)(field*90)/8388607L;
       if (lon > 180) lon = lon - 360.0;
       sprintf(value, "%f", lon);
   }
-  janus_app_fields_add_field(*app_fields, LONGITUDE, value);
-
-#define DEPTH "Depth"
-#define DEPTH_OFFSET (59)
+  janus_app_fields_add_field(*app_fields, LONGITUDE_NAME, value);
 
   field = 0;
   barr2int(cargo, DEPTH_OFFSET, &field, 0, 13);
   field = swap(field, (13+7)/8);
   field >>= 3;
   sprintf(value, "%d", field);
-  janus_app_fields_add_field(*app_fields, DEPTH, value);
-
-#define SPEED "Speed"
-#define SPEED_OFFSET (72)
+  janus_app_fields_add_field(*app_fields, DEPTH_NAME, value);
 
   field = 0;
   barr2int(cargo, SPEED_OFFSET, &field, 0, 9);
   field = swap(field, (9+7)/8);
   field >>= 7;
   sprintf(value, "%f", field * 0.1);
-  janus_app_fields_add_field(*app_fields, SPEED, value);
-
-#define HEADING "Heading"
-#define HEADING_OFFSET (81)
+  janus_app_fields_add_field(*app_fields, SPEED_NAME, value);
 
   field = 0;
   barr2int(cargo, HEADING_OFFSET, &field, 0, 9);
@@ -168,8 +169,8 @@ cargo_decode(janus_uint8_t* cargo, unsigned cargo_size, janus_app_fields_t* app_
   } else {
       sprintf(value, "%f", field * 0.705);
   }
-  janus_app_fields_add_field(*app_fields, HEADING, value);
-  
+  janus_app_fields_add_field(*app_fields, HEADING_NAME, value);
+
   return 0;
 }
 
@@ -185,14 +186,14 @@ cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* car
   *cargo = JANUS_UTILS_MEMORY_REALLOC(*cargo, janus_uint8_t, *cargo_size);
   for (i = 0; i != app_fields->field_count; ++i) {
       
-      if (strcmp(app_fields->fields[i].name, NATIONALITY) == 0) {
+      if (strcmp(app_fields->fields[i].name, NATIONALITY_NAME) == 0) {
           l1 = app_fields->fields[i].value[0] - 'A' + 1;
           l2 = app_fields->fields[i].value[1] - 'A' + 1;
           l1 <<= 3; int2barr(*cargo, NATIONALITY_OFFSET, &l1, 0, 5);
           l2 <<= 3; int2barr(*cargo, NATIONALITY_OFFSET + 5, &l2, 0, 5);
       }
       
-      if (strcmp(app_fields->fields[i].name, LATITUDE) == 0) {
+      if (strcmp(app_fields->fields[i].name, LATITUDE_NAME) == 0) {
           field = 0;
           if (strcmp(app_fields->fields[i].value, "n.a.") == 0) {
               field = 0x800000;
@@ -207,7 +208,7 @@ cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* car
           int2barr(*cargo, LATITUDE_OFFSET, &field, 0, 24);
       }
       
-      if (strcmp(app_fields->fields[i].name, LONGITUDE) == 0) {
+      if (strcmp(app_fields->fields[i].name, LONGITUDE_NAME) == 0) {
           field = 0;
           if (strcmp(app_fields->fields[i].value, "n.a.") == 0) {
               field = 0x1000000;
@@ -223,14 +224,14 @@ cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* car
           int2barr(*cargo, LONGITUDE_OFFSET, &field, 0, 25); 
       }
       
-      if (strcmp(app_fields->fields[i].name, DEPTH) == 0) {
+      if (strcmp(app_fields->fields[i].name, DEPTH_NAME) == 0) {
           field = atoi(app_fields->fields[i].value);
           field <<= 3;
           field = swap(field, (13+7)/8);
           int2barr(*cargo, DEPTH_OFFSET, &field, 0, 13);
       }
 
-      if (strcmp(app_fields->fields[i].name, SPEED) == 0) {
+      if (strcmp(app_fields->fields[i].name, SPEED_NAME) == 0) {
           f = atof(app_fields->fields[i].value);
           field = round(f * 10);
           field <<= 7;
@@ -238,7 +239,7 @@ cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* car
           int2barr(*cargo, SPEED_OFFSET, &field, 0, 9);
       }
   
-      if (strcmp(app_fields->fields[i].name, HEADING) == 0) {
+      if (strcmp(app_fields->fields[i].name, HEADING_NAME) == 0) {
           f = atof(app_fields->fields[i].value);
           if (strcmp(app_fields->fields[i].value, "n.a.") == 0) {
               field = 511;
diff --git a/src/c/plugins/plugin_000_02.c b/src/c/plugins/plugin_000_02.c
index d3c65f2..abf48d7 100644
--- a/src/c/plugins/plugin_000_02.c
+++ b/src/c/plugins/plugin_000_02.c
@@ -17,6 +17,30 @@
 /* #define CRC_OFFSET (60) */
 #define CRC_OFFSET (64)
 
+#define SURVIVORS_NAME   "Survivors"
+#define SURVIVORS_OFFSET (52)
+  
+#define TEMPERATURE_NAME   "Temperature"
+#define TEMPERATURE_OFFSET (46)
+  
+#define PRESSURE_NAME   "Pressure"
+#define PRESSURE_OFFSET (36)
+  
+#define H2_NAME   "H2"
+#define H2_OFFSET (30)
+
+#define CO_NAME   "CO"
+#define CO_OFFSET (22)
+  
+#define CO2_NAME   "CO2"
+#define CO2_OFFSET (16)
+  
+#define O2_NAME   "O2"
+#define O2_OFFSET (10)
+
+#define NATIONALITY_NAME  "Nationality"
+#define NATIONALITY_OFFSET (0)
+
 #define SCHEDULE "Schedule"
 #define STATION_ID "Station_Identifier"
 #define DESTINATION_ID "Destination Identifier"
@@ -88,8 +112,6 @@ cargo_decode(janus_uint8_t* cargo, unsigned cargo_size, janus_app_fields_t* app_
   janus_uint8_t l1 = 0, l2 = 0;
   double lon;
 
-#define NATIONALITY        "Nationality"
-#define NATIONALITY_OFFSET (0)
   field = janus_crc_16(cargo, cargo_size - 2, 0);
   field = SWAP32_BY_BITSIZE(field, 16);
   barr2int(cargo, CRC_OFFSET, &crc, 0, 16);
@@ -103,69 +125,48 @@ cargo_decode(janus_uint8_t* cargo, unsigned cargo_size, janus_app_fields_t* app_
   barr2int(cargo, NATIONALITY_OFFSET, &l1, 0, 5); l1 >>= 3;
   barr2int(cargo, NATIONALITY_OFFSET + 5, &l2, 0, 5); l2 >>= 3;
   sprintf(value, "%c%c", 'A' + l1 - 1, 'A' + l2 - 1);
-  janus_app_fields_add_field(*app_fields, NATIONALITY, value);
-
-#define O2        "O2"
-#define O2_OFFSET (10)
+  janus_app_fields_add_field(*app_fields, NATIONALITY_NAME, value);
 
   field = 0;
   barr2int(cargo, O2_OFFSET, &field, 0, 6);
   field >>= 2;
   sprintf(value, "%f", field * 0.1 + 17);
-  janus_app_fields_add_field(*app_fields, O2, value);
-  
-#define CO2        "CO2"
-#define CO2_OFFSET (16)
+  janus_app_fields_add_field(*app_fields, O2_NAME, value);
   
   field = 0;
   barr2int(cargo, CO2_OFFSET, &field, 0, 6);
   field >>= 2;
   sprintf(value, "%f", field * 0.1);
-  janus_app_fields_add_field(*app_fields, CO2, value);
+  janus_app_fields_add_field(*app_fields, CO2_NAME, value);
 
-#define CO        "CO"
-#define CO_OFFSET (22)
-  
   field = 0;
   barr2int(cargo, CO_OFFSET, &field, 0, 8);
   sprintf(value, "%d", field);
-  janus_app_fields_add_field(*app_fields, CO, value);
+  janus_app_fields_add_field(*app_fields, CO_NAME, value);
   
-#define H2        "H2"
-#define H2_OFFSET (30)
-
   field = 0;
   barr2int(cargo, H2_OFFSET, &field, 0, 6);
   field >>= 2;
   sprintf(value, "%f", field * 0.1);
-  janus_app_fields_add_field(*app_fields, H2, value);
+  janus_app_fields_add_field(*app_fields, H2_NAME, value);
 
-#define PRESSURE        "Pressure"
-#define PRESSURE_OFFSET (36)
-  
   field = 0;
   barr2int(cargo, PRESSURE_OFFSET, &field, 0, 10);
   field = swap(field, (10+7)/8);
   field >>= 6;
   sprintf(value, "%f", field * 0.1 + 0.9);
-  janus_app_fields_add_field(*app_fields, PRESSURE, value);
-  
-#define TEMPERATURE        "Temperature"
-#define TEMPERATURE_OFFSET (46)
+  janus_app_fields_add_field(*app_fields, PRESSURE_NAME, value);
   
   field = 0;
   barr2int(cargo, TEMPERATURE_OFFSET, &field, 0, 6);
   field >>= 2;
   sprintf(value, "%d", field);
-  janus_app_fields_add_field(*app_fields, TEMPERATURE, value);
+  janus_app_fields_add_field(*app_fields, TEMPERATURE_NAME, value);
 
-#define SURVIVORS        "Survivors"
-#define SURVIVORS_OFFSET (52)
-  
   field = 0;
   barr2int(cargo, SURVIVORS_OFFSET, &field, 0, 8);
   sprintf(value, "%d", field);
-  janus_app_fields_add_field(*app_fields, SURVIVORS, value);
+  janus_app_fields_add_field(*app_fields, SURVIVORS_NAME, value);
 
   return 0;
 }
@@ -182,14 +183,14 @@ cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* car
   *cargo = JANUS_UTILS_MEMORY_REALLOC(*cargo, janus_uint8_t, *cargo_size);
   for (i = 0; i != app_fields->field_count; ++i) {
       
-      if (strcmp(app_fields->fields[i].name, NATIONALITY) == 0) {
+      if (strcmp(app_fields->fields[i].name, NATIONALITY_NAME) == 0) {
           l1 = app_fields->fields[i].value[0] - 'A' + 1;
           l2 = app_fields->fields[i].value[1] - 'A' + 1;
           l1 <<= 3; int2barr(*cargo, NATIONALITY_OFFSET, &l1, 0, 5);
           l2 <<= 3; int2barr(*cargo, NATIONALITY_OFFSET + 5, &l2, 0, 5);
       }
 
-      if (strcmp(app_fields->fields[i].name, O2) == 0) {
+      if (strcmp(app_fields->fields[i].name, O2_NAME) == 0) {
           f = atof(app_fields->fields[i].value);
           if ( f >= 17 && f < 23.3) {
               field = round((f - 17) * 10.0);
@@ -200,26 +201,26 @@ cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* car
           int2barr(*cargo, O2_OFFSET, &field, 0, 6);
       }
       
-      if (strcmp(app_fields->fields[i].name, CO2) == 0) {
+      if (strcmp(app_fields->fields[i].name, CO2_NAME) == 0) {
           f = atof(app_fields->fields[i].value);
           field = round(f * 10);
           field <<= 2;
           int2barr(*cargo, CO2_OFFSET, &field, 0, 6);
       }
 
-      if (strcmp(app_fields->fields[i].name, CO) == 0) {
+      if (strcmp(app_fields->fields[i].name, CO_NAME) == 0) {
           field = atoi(app_fields->fields[i].value);
           int2barr(*cargo, CO_OFFSET, &field, 0, 8);
       }
   
-      if (strcmp(app_fields->fields[i].name, H2) == 0) {
+      if (strcmp(app_fields->fields[i].name, H2_NAME) == 0) {
           f = atof(app_fields->fields[i].value);
           field = round(f * 10);
           field <<= 2;
           int2barr(*cargo, H2_OFFSET, &field, 0, 6);
       }
 
-      if (strcmp(app_fields->fields[i].name, PRESSURE) == 0) {
+      if (strcmp(app_fields->fields[i].name, PRESSURE_NAME) == 0) {
           f = atof(app_fields->fields[i].value);
           if ( f >= 0.9 && f < 103.2) {
               field = round((f - 0.9) * 10.0);
@@ -231,13 +232,13 @@ cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* car
           int2barr(*cargo, PRESSURE_OFFSET, &field, 0, 10);
       }
   
-      if (strcmp(app_fields->fields[i].name, TEMPERATURE) == 0) {
+      if (strcmp(app_fields->fields[i].name, TEMPERATURE_NAME) == 0) {
           field = atoi(app_fields->fields[i].value);
           field <<= 2;
           int2barr(*cargo, TEMPERATURE_OFFSET, &field, 0, 6);
       }
 
-      if (strcmp(app_fields->fields[i].name, SURVIVORS) == 0) {
+      if (strcmp(app_fields->fields[i].name, SURVIVORS_NAME) == 0) {
           field = atoi(app_fields->fields[i].value);
           int2barr(*cargo, SURVIVORS_OFFSET, &field, 0, 8);
       }
diff --git a/src/c/plugins/plugin_000_03.c b/src/c/plugins/plugin_000_03.c
index 4243e1e..7fe2658 100644
--- a/src/c/plugins/plugin_000_03.c
+++ b/src/c/plugins/plugin_000_03.c
@@ -17,6 +17,45 @@
 /* #define CRC_OFFSET (140) */
 #define CRC_OFFSET (144)
 
+#define NATIONALITY_NAME   "Nationality"
+#define NATIONALITY_OFFSET (0)
+
+#define LATITUDE_NAME "Latitude"
+#define LATITUDE_OFFSET (10)
+  
+#define LONGITUDE_NAME "Longitude"
+#define LONGITUDE_OFFSET (34)
+
+#define DEPTH_NAME "Depth"
+#define DEPTH_OFFSET (59)
+
+#define SPEED_NAME "Speed"
+#define SPEED_OFFSET (72)
+
+#define HEADING_NAME "Heading"
+#define HEADING_OFFSET (81)
+
+#define O2_NAME        "O2"
+#define O2_OFFSET (90)
+
+#define CO2_NAME        "CO2"
+#define CO2_OFFSET (96)
+  
+#define CO_NAME        "CO"
+#define CO_OFFSET (102)
+  
+#define H2_NAME        "H2"
+#define H2_OFFSET (110)
+
+#define PRESSURE_NAME        "Pressure"
+#define PRESSURE_OFFSET (116)
+  
+#define TEMPERATURE_NAME        "Temperature"
+#define TEMPERATURE_OFFSET (126)
+  
+#define SURVIVORS_NAME        "Survivors"
+#define SURVIVORS_OFFSET (132)
+
 #define SCHEDULE "Schedule"
 #define STATION_ID "Station_Identifier"
 #define DESTINATION_ID "Destination Identifier"
@@ -88,8 +127,6 @@ cargo_decode(janus_uint8_t* cargo, unsigned cargo_size, janus_app_fields_t* app_
   janus_uint8_t l1 = 0, l2 = 0;
   double lat, lon;
 
-#define NATIONALITY   "Nationality"
-#define NATIONALITY_OFFSET (0)
   field = janus_crc_16(cargo, cargo_size - 2, 0);
   field = SWAP32_BY_BITSIZE(field, 16);
   barr2int(cargo, CRC_OFFSET, &crc, 0, 16);
@@ -103,24 +140,18 @@ cargo_decode(janus_uint8_t* cargo, unsigned cargo_size, janus_app_fields_t* app_
   barr2int(cargo, NATIONALITY_OFFSET, &l1, 0, 5); l1 >>= 3;
   barr2int(cargo, NATIONALITY_OFFSET + 5, &l2, 0, 5); l2 >>= 3;
   sprintf(value, "%c%c", 'A' + l1 - 1, 'A' + l2 - 1);
-  janus_app_fields_add_field(*app_fields, NATIONALITY, value);
+  janus_app_fields_add_field(*app_fields, NATIONALITY_NAME, value);
 
-#define LATITUDE "Latitude"
-#define LATITUDE_OFFSET (10)
-  
   barr2int(cargo, LATITUDE_OFFSET, &field, 0, 24);
   field = swap(field, (24+7)/8);
   if (field == 0x800000) {
       sprintf(value, "n.a.");
   } else {
-      lat = (double)(field*90)/8388607;
+      lat = (double)(field*90)/8388607L;
       if (lat > 90) lat = lat - 180;
       sprintf(value, "%f", lat);
   }
-  janus_app_fields_add_field(*app_fields, LATITUDE, value);
-
-#define LONGITUDE "Longitude"
-#define LONGITUDE_OFFSET (34)
+  janus_app_fields_add_field(*app_fields, LATITUDE_NAME, value);
 
   barr2int(cargo, LONGITUDE_OFFSET, &field, 0, 25); 
   field = swap(field, (25+7)/8);
@@ -129,34 +160,25 @@ cargo_decode(janus_uint8_t* cargo, unsigned cargo_size, janus_app_fields_t* app_
       sprintf(value, "n.a.");
   } else {
       /* field -= 4; */
-      lon = (double)(field*90)/8388607;
+      lon = (double)(field*90)/8388607L;
       if (lon > 180) lon = lon - 360.0;
       sprintf(value, "%f", lon);
   }
-  janus_app_fields_add_field(*app_fields, LONGITUDE, value);
-
-#define DEPTH "Depth"
-#define DEPTH_OFFSET (59)
+  janus_app_fields_add_field(*app_fields, LONGITUDE_NAME, value);
 
   field = 0;
   barr2int(cargo, DEPTH_OFFSET, &field, 0, 13);
   field = swap(field, (13+7)/8);
   field >>= 3;
   sprintf(value, "%d", field);
-  janus_app_fields_add_field(*app_fields, DEPTH, value);
-
-#define SPEED "Speed"
-#define SPEED_OFFSET (72)
+  janus_app_fields_add_field(*app_fields, DEPTH_NAME, value);
 
   field = 0;
   barr2int(cargo, SPEED_OFFSET, &field, 0, 9);
   field = swap(field, (9+7)/8);
   field >>= 7;
   sprintf(value, "%f", field * 0.1);
-  janus_app_fields_add_field(*app_fields, SPEED, value);
-
-#define HEADING "Heading"
-#define HEADING_OFFSET (81)
+  janus_app_fields_add_field(*app_fields, SPEED_NAME, value);
 
   field = 0;
   barr2int(cargo, HEADING_OFFSET, &field, 0, 9);
@@ -167,69 +189,48 @@ cargo_decode(janus_uint8_t* cargo, unsigned cargo_size, janus_app_fields_t* app_
   } else {
       sprintf(value, "%f", field * 0.705);
   }
-  janus_app_fields_add_field(*app_fields, HEADING, value);
+  janus_app_fields_add_field(*app_fields, HEADING_NAME, value);
     
-#define O2        "O2"
-#define O2_OFFSET (90)
-
   field = 0;
   barr2int(cargo, O2_OFFSET, &field, 0, 6);
   field >>= 2;
   sprintf(value, "%f", field * 0.1 + 17);
-  janus_app_fields_add_field(*app_fields, O2, value);
-  
-#define CO2        "CO2"
-#define CO2_OFFSET (96)
+  janus_app_fields_add_field(*app_fields, O2_NAME, value);
   
   field = 0;
   barr2int(cargo, CO2_OFFSET, &field, 0, 6);
   field >>= 2;
   sprintf(value, "%f", field * 0.1);
-  janus_app_fields_add_field(*app_fields, CO2, value);
+  janus_app_fields_add_field(*app_fields, CO2_NAME, value);
 
-#define CO        "CO"
-#define CO_OFFSET (102)
-  
   field = 0;
   barr2int(cargo, CO_OFFSET, &field, 0, 8);
   sprintf(value, "%d", field);
-  janus_app_fields_add_field(*app_fields, CO, value);
+  janus_app_fields_add_field(*app_fields, CO_NAME, value);
   
-#define H2        "H2"
-#define H2_OFFSET (110)
-
   field = 0;
   barr2int(cargo, H2_OFFSET, &field, 0, 6);
   field >>= 2;
   sprintf(value, "%f", field * 0.1);
-  janus_app_fields_add_field(*app_fields, H2, value);
+  janus_app_fields_add_field(*app_fields, H2_NAME, value);
 
-#define PRESSURE        "Pressure"
-#define PRESSURE_OFFSET (116)
-  
   field = 0;
   barr2int(cargo, PRESSURE_OFFSET, &field, 0, 10);
   field = swap(field, (10+7)/8);
   field >>= 6;
   sprintf(value, "%f", field * 0.1 + 0.9);
-  janus_app_fields_add_field(*app_fields, PRESSURE, value);
-  
-#define TEMPERATURE        "Temperature"
-#define TEMPERATURE_OFFSET (126)
+  janus_app_fields_add_field(*app_fields, PRESSURE_NAME, value);
   
   field = 0;
   barr2int(cargo, TEMPERATURE_OFFSET, &field, 0, 6);
   field >>= 2;
   sprintf(value, "%d", field);
-  janus_app_fields_add_field(*app_fields, TEMPERATURE, value);
+  janus_app_fields_add_field(*app_fields, TEMPERATURE_NAME, value);
 
-#define SURVIVORS        "Survivors"
-#define SURVIVORS_OFFSET (132)
-  
   field = 0;
   barr2int(cargo, SURVIVORS_OFFSET, &field, 0, 8);
   sprintf(value, "%d", field);
-  janus_app_fields_add_field(*app_fields, SURVIVORS, value);
+  janus_app_fields_add_field(*app_fields, SURVIVORS_NAME, value);
 
   return 0;
 }
@@ -246,14 +247,14 @@ cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* car
   *cargo = JANUS_UTILS_MEMORY_REALLOC(*cargo, janus_uint8_t, *cargo_size);
   for (i = 0; i != app_fields->field_count; ++i) {
       
-      if (strcmp(app_fields->fields[i].name, NATIONALITY) == 0) {
+      if (strcmp(app_fields->fields[i].name, NATIONALITY_NAME) == 0) {
           l1 = app_fields->fields[i].value[0] - 'A' + 1;
           l2 = app_fields->fields[i].value[1] - 'A' + 1;
           l1 <<= 3; int2barr(*cargo, NATIONALITY_OFFSET, &l1, 0, 5);
           l2 <<= 3; int2barr(*cargo, NATIONALITY_OFFSET + 5, &l2, 0, 5);
       }
 
-      if (strcmp(app_fields->fields[i].name, LATITUDE) == 0) {
+      if (strcmp(app_fields->fields[i].name, LATITUDE_NAME) == 0) {
           field = 0;
           if (strcmp(app_fields->fields[i].value, "n.a.") == 0) {
               field = 0x800000;
@@ -268,7 +269,7 @@ cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* car
           int2barr(*cargo, LATITUDE_OFFSET, &field, 0, 24);
       }
       
-      if (strcmp(app_fields->fields[i].name, LONGITUDE) == 0) {
+      if (strcmp(app_fields->fields[i].name, LONGITUDE_NAME) == 0) {
           field = 0;
           if (strcmp(app_fields->fields[i].value, "n.a.") == 0) {
               field = 0x1000000;
@@ -284,14 +285,14 @@ cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* car
           int2barr(*cargo, LONGITUDE_OFFSET, &field, 0, 25); 
       }
       
-      if (strcmp(app_fields->fields[i].name, DEPTH) == 0) {
+      if (strcmp(app_fields->fields[i].name, DEPTH_NAME) == 0) {
           field = atoi(app_fields->fields[i].value);
           field <<= 3;
           field = swap(field, (13+7)/8);
           int2barr(*cargo, DEPTH_OFFSET, &field, 0, 13);
       }
 
-      if (strcmp(app_fields->fields[i].name, SPEED) == 0) {
+      if (strcmp(app_fields->fields[i].name, SPEED_NAME) == 0) {
           f = atof(app_fields->fields[i].value);
           field = round(f * 10);
           field <<= 7;
@@ -299,7 +300,7 @@ cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* car
           int2barr(*cargo, SPEED_OFFSET, &field, 0, 9);
       }
   
-      if (strcmp(app_fields->fields[i].name, HEADING) == 0) {
+      if (strcmp(app_fields->fields[i].name, HEADING_NAME) == 0) {
           f = atof(app_fields->fields[i].value);
           if (strcmp(app_fields->fields[i].value, "n.a.") == 0) {
               field = 511;
@@ -311,7 +312,7 @@ cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* car
           int2barr(*cargo, HEADING_OFFSET, &field, 0, 9);
       }
 
-      if (strcmp(app_fields->fields[i].name, O2) == 0) {
+      if (strcmp(app_fields->fields[i].name, O2_NAME) == 0) {
           f = atof(app_fields->fields[i].value);
           if ( f >= 17 && f < 23.3) {
               field = round((f - 17) * 10.0);
@@ -322,26 +323,26 @@ cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* car
           int2barr(*cargo, O2_OFFSET, &field, 0, 6);
       }
       
-      if (strcmp(app_fields->fields[i].name, CO2) == 0) {
+      if (strcmp(app_fields->fields[i].name, CO2_NAME) == 0) {
           f = atof(app_fields->fields[i].value);
           field = round(f * 10);
           field <<= 2;
           int2barr(*cargo, CO2_OFFSET, &field, 0, 6);
       }
 
-      if (strcmp(app_fields->fields[i].name, CO) == 0) {
+      if (strcmp(app_fields->fields[i].name, CO_NAME) == 0) {
           field = atoi(app_fields->fields[i].value);
           int2barr(*cargo, CO_OFFSET, &field, 0, 8);
       }
   
-      if (strcmp(app_fields->fields[i].name, H2) == 0) {
+      if (strcmp(app_fields->fields[i].name, H2_NAME) == 0) {
           f = atof(app_fields->fields[i].value);
           field = round(f * 10);
           field <<= 2;
           int2barr(*cargo, H2_OFFSET, &field, 0, 6);
       }
 
-      if (strcmp(app_fields->fields[i].name, PRESSURE) == 0) {
+      if (strcmp(app_fields->fields[i].name, PRESSURE_NAME) == 0) {
           f = atof(app_fields->fields[i].value);
           if ( f >= 0.9 && f < 103.2) {
               field = round((f - 0.9) * 10.0);
@@ -353,13 +354,13 @@ cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* car
           int2barr(*cargo, PRESSURE_OFFSET, &field, 0, 10);
       }
   
-      if (strcmp(app_fields->fields[i].name, TEMPERATURE) == 0) {
+      if (strcmp(app_fields->fields[i].name, TEMPERATURE_NAME) == 0) {
           field = atoi(app_fields->fields[i].value);
           field <<= 2;
           int2barr(*cargo, TEMPERATURE_OFFSET, &field, 0, 6);
       }
 
-      if (strcmp(app_fields->fields[i].name, SURVIVORS) == 0) {
+      if (strcmp(app_fields->fields[i].name, SURVIVORS_NAME) == 0) {
           field = atoi(app_fields->fields[i].value);
           int2barr(*cargo, SURVIVORS_OFFSET, &field, 0, 8);
       }
diff --git a/src/c/plugins/plugin_002_08.c b/src/c/plugins/plugin_002_08.c
index 0ae0f08..fc84f06 100644
--- a/src/c/plugins/plugin_002_08.c
+++ b/src/c/plugins/plugin_002_08.c
@@ -14,11 +14,36 @@
 
 #define CRC_NAME "Cargo CRC Validity"
 
-#define SCHEDULE      "Schedule"
+#define SCHEDULE_NAME "Schedule"
 #define STATION_ID    "Station_Identifier"
-#define CONTACT_TYPE  "Type"
-#define CONTACT_DEPTH "Depth"
-#define NoEC          "Extra_Contacts"
+
+#define CONTACT_TYPE_NAME  "Type"
+#define TYPE_OFFSET(i) (100 + 97 * (i - 1))
+
+#define CONTACT_DEPTH_NAME "Depth"
+#define DEPTH_OFFSET(i) (100 + 97 * (i - 1) + 4)
+
+#define NoEC_NAME          "Extra_Contacts"
+
+#define USERID_NAME "User_ID"
+#define USERID_OFFSET(i) ((i > 0 ? (100 + 97 * (i - 1) + 14) : 0))
+
+#define LATITUDE_NAME "Latitude"
+#define LATITUDE_OFFSET(i) ((i > 0 ? (100 + 97 * (i - 1) + 14) : 0) + 30)
+
+#define LONGITUDE_NAME "Longitude"
+#define LONGITUDE_OFFSET(i) ((i > 0 ? (100 + 97 * (i - 1) + 60) : 54))
+
+#define SPEED_NAME "Speed"
+#define SPEED_OFFSET(i) ((i > 0 ? (100 + 97 * (i - 1) + 76) : 79))
+
+#define NAVIGATIONAL_STATUS_NAME "Navigation_Status"
+#define NAVIGATIONAL_STATUS_OFFSET(i) ((i > 0 ? (100 + 97 * (i - 1) + 93) : 96))
+
+#define TRUE_HEADING_NAME "True_Heading"
+
+#define COG_NAME "CoG"
+#define COG_OFFSET(i) ((i > 0 ? (100 + 97 * (i - 1) + 84) : 87))
 
 char *type_str(int contact_type)
 {
@@ -163,7 +188,7 @@ app_data_decode(janus_uint64_t app_data, janus_uint8_t app_data_size, unsigned*
   // Schedule (8 bits)
   schedule = (janus_uint8_t)((app_data >> 26) & (0xFFU));
   sprintf(value, "%u", schedule);
-  janus_app_fields_add_field(app_fields, SCHEDULE, value);
+  janus_app_fields_add_field(app_fields, SCHEDULE_NAME, value);
 
   // Station_Identifier (8 bits)
   station_id = (janus_uint8_t)((app_data >> 17) & (0xFFU));
@@ -173,17 +198,17 @@ app_data_decode(janus_uint64_t app_data, janus_uint8_t app_data_size, unsigned*
   // Number of contacts (3 bits).
   noc = (unsigned)(app_data & (0x7U));
   sprintf(value, "%u", noc);
-  janus_app_fields_add_field(app_fields, NoEC, value);
+  janus_app_fields_add_field(app_fields, NoEC_NAME, value);
 
   // Contact 1 Type (4)
   contact_type = (janus_uint8_t)((app_data >> 13) & (0x0FU));
   sprintf(value, "%s", type_str(contact_type));
-  janus_app_fields_add_field(app_fields, CONTACT_TYPE, value);
+  janus_app_fields_add_field(app_fields, CONTACT_TYPE_NAME, value);
   
   // Contact 1 Depth (10 bits)
   depth = (janus_uint16_t)((app_data >> 3) & (0x3FFU));
   sprintf(value, "%u", contact_depth(depth));
-  janus_app_fields_add_field(app_fields, CONTACT_DEPTH, value);
+  janus_app_fields_add_field(app_fields, CONTACT_DEPTH_NAME, value);
 
   *cargo_size = (100 + 97 * (noc) + 16 + 7) / 8;
   return 0;
@@ -201,7 +226,7 @@ app_data_encode(unsigned desired_cargo_size, janus_app_fields_t app_fields, janu
   *cargo_size = desired_cargo_size;
 
   for (i = 0; i != app_fields->field_count; ++i) {
-      if (strcmp(app_fields->fields[i].name, SCHEDULE) == 0) {
+      if (strcmp(app_fields->fields[i].name, SCHEDULE_NAME) == 0) {
           field = atoi(app_fields->fields[i].value) & 0xFFU;
           field <<= 26;
           *app_data |= field;
@@ -211,18 +236,17 @@ app_data_encode(unsigned desired_cargo_size, janus_app_fields_t app_fields, janu
           field <<= 17;
           *app_data |= field;
       }
-      if (strcmp(app_fields->fields[i].name, NoEC) == 0) {
+      if (strcmp(app_fields->fields[i].name, NoEC_NAME) == 0) {
           field = atoi(app_fields->fields[i].value) & 0x7U;
           *app_data |= field;
-          printf("NoEC = %d\n", field);
       }
       if (i < 8) {
-          if (strcmp(app_fields->fields[i].name, CONTACT_TYPE) == 0) {
+          if (strcmp(app_fields->fields[i].name, CONTACT_TYPE_NAME) == 0) {
               field = str_to_type(app_fields->fields[i].value);
               field <<= 13;
               *app_data |= field;
           }
-          if (strcmp(app_fields->fields[i].name, CONTACT_DEPTH) == 0) {
+          if (strcmp(app_fields->fields[i].name, CONTACT_DEPTH_NAME) == 0) {
               if (strcmp(app_fields->fields[i].value, "n.a.") == 0) {
                   field = 1023;
               } else {
@@ -261,36 +285,28 @@ cargo_decode(janus_uint8_t* cargo, unsigned cargo_size, janus_app_fields_t* app_
  
   for (i = 0; i < noc; i++) {
       if (i > 0) {
-          
-#define TYPE_OFFSET (100 + 97 * (i - 1))
           field = 0;
-          barr2int(cargo, TYPE_OFFSET, &field, 0, 4);
+          barr2int(cargo, TYPE_OFFSET(i), &field, 0, 4);
           field >>= 4;
           sprintf(value, "%s", type_str(field));
-          janus_app_fields_add_field(*app_fields, CONTACT_TYPE, value);
-          
-#define DEPTH_OFFSET (100 + 97 * (i - 1) + 4)
+          janus_app_fields_add_field(*app_fields, CONTACT_TYPE_NAME, value);
           field = 0;
-          barr2int(cargo, DEPTH_OFFSET, &field, 0, 10);
+          barr2int(cargo, DEPTH_OFFSET(i), &field, 0, 10);
           field = swap(field, (10+7)/8);
           field >>= 6;
           sprintf(value, "%u", contact_depth(field));
-          janus_app_fields_add_field(*app_fields, CONTACT_DEPTH, value);
+          janus_app_fields_add_field(*app_fields, CONTACT_DEPTH_NAME, value);
       }
-#define USERID "User_ID"
-#define USERID_OFFSET ((i > 0 ? (100 + 97 * (i - 1) + 14) : 0))
       field = 0;
-      barr2int(cargo, USERID_OFFSET, &field, 0, 30);
+      barr2int(cargo, USERID_OFFSET(i), &field, 0, 30);
       field = swap(field, (30+7)/8);
       field >>= 2;
       sprintf(value, "%u", field);
-      janus_app_fields_add_field(*app_fields, USERID, value);
+      janus_app_fields_add_field(*app_fields, USERID_NAME, value);
 
-#define LATITUDE "Latitude"
-#define LATITUDE_OFFSET ((i > 0 ? (100 + 97 * (i - 1) + 14) : 0) + 30)
       field = 0;
       field_len = i == 0 ? 24 : 16;
-      barr2int(cargo, LATITUDE_OFFSET, &field, 0, field_len);
+      barr2int(cargo, LATITUDE_OFFSET(i), &field, 0, field_len);
       field = swap(field, (field_len+7)/8);
       if (field == 0x800000 || lat_flag) {
           sprintf(value, "n.a.");
@@ -311,13 +327,11 @@ cargo_decode(janus_uint8_t* cargo, unsigned cargo_size, janus_app_fields_t* app_
           }
           sprintf(value, "%f", lat);
       }
-      janus_app_fields_add_field(*app_fields, LATITUDE, value);
+      janus_app_fields_add_field(*app_fields, LATITUDE_NAME, value);
 
-#define LONGITUDE "Longitude"
-#define LONGITUDE_OFFSET ((i > 0 ? (100 + 97 * (i - 1) + 60) : 54))
       field = 0;
       field_len = i == 0 ? 25 : 16;
-      barr2int(cargo, LONGITUDE_OFFSET, &field, 0, field_len);
+      barr2int(cargo, LONGITUDE_OFFSET(i), &field, 0, field_len);
       field = swap(field, (field_len+7)/8);
       field >>= (field_len % 8) ? 8 - (field_len % 8) : 0;
       if (field == 0x1000000 || lon_flag) {
@@ -339,12 +353,10 @@ cargo_decode(janus_uint8_t* cargo, unsigned cargo_size, janus_app_fields_t* app_
           }
           sprintf(value, "%f", lon);
       }
-      janus_app_fields_add_field(*app_fields, LONGITUDE, value);
+      janus_app_fields_add_field(*app_fields, LONGITUDE_NAME, value);
       
-#define SPEED "Speed"
-#define SPEED_OFFSET ((i > 0 ? (100 + 97 * (i - 1) + 76) : 79))
       field = 0;
-      barr2int(cargo, SPEED_OFFSET, &field, 0, 8);
+      barr2int(cargo, SPEED_OFFSET(i), &field, 0, 8);
       if (field == 255) {
           sprintf(value, "n.a.");
       } else if (field == 254) {
@@ -352,19 +364,14 @@ cargo_decode(janus_uint8_t* cargo, unsigned cargo_size, janus_app_fields_t* app_
       } else {
           sprintf(value, "%f", contact_speed(field));
       }
-      janus_app_fields_add_field(*app_fields, SPEED, value);
+      janus_app_fields_add_field(*app_fields, SPEED_NAME, value);
 
-#define NAVIGATIONAL_STATUS "Navigation_Status"
-#define NAVIGATIONAL_STATUS_OFFSET ((i > 0 ? (100 + 97 * (i - 1) + 93) : 96))
       field = 0;
-      barr2int(cargo, NAVIGATIONAL_STATUS_OFFSET, &field, 0, 4);
+      barr2int(cargo, NAVIGATIONAL_STATUS_OFFSET(i), &field, 0, 4);
       status = field >> 4;
       
-#define TRUE_HEADING "True_Heading"
-#define COG "CoG"
-#define COG_OFFSET ((i > 0 ? (100 + 97 * (i - 1) + 84) : 87))
       field = 0;
-      barr2int(cargo, COG_OFFSET, &field, 0, 9);
+      barr2int(cargo, COG_OFFSET(i), &field, 0, 9);
       field = swap(field, (9+7)/8);
       field >>= 7;
       if (field == 511) {
@@ -376,16 +383,16 @@ cargo_decode(janus_uint8_t* cargo, unsigned cargo_size, janus_app_fields_t* app_
       case 1: /* At anchor */
       case 5: /* Moored */
       case 6: /* Aground */
-          janus_app_fields_add_field(*app_fields, TRUE_HEADING, value);          
-          janus_app_fields_add_field(*app_fields, COG, "n.a.");          
+          janus_app_fields_add_field(*app_fields, TRUE_HEADING_NAME, value);
+          janus_app_fields_add_field(*app_fields, COG_NAME, "n.a.");
           break;
       default:
-          janus_app_fields_add_field(*app_fields, TRUE_HEADING, "n.a.");          
-          janus_app_fields_add_field(*app_fields, COG, value);
+          janus_app_fields_add_field(*app_fields, TRUE_HEADING_NAME, "n.a.");
+          janus_app_fields_add_field(*app_fields, COG_NAME, value);
       }
 
       sprintf(value, "%s", status_str(status));
-      janus_app_fields_add_field(*app_fields, NAVIGATIONAL_STATUS, value);
+      janus_app_fields_add_field(*app_fields, NAVIGATIONAL_STATUS_NAME, value);
   }
   
   return 0;
@@ -404,7 +411,7 @@ cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* car
   double th = 0, cog = 0;
   
   for (j = 0; j != app_fields->field_count; ++j) {
-      if (strcmp(app_fields->fields[j].name, NoEC) == 0) {
+      if (strcmp(app_fields->fields[j].name, NoEC_NAME) == 0) {
           extra_contacts = atoi(app_fields->fields[j].value);
       }
   }
@@ -413,12 +420,12 @@ cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* car
 
   for (j = 0; j != app_fields->field_count; ++j) {
       if (i > 0) {
-          if (strcmp(app_fields->fields[j].name, CONTACT_TYPE) == 0) {
+          if (strcmp(app_fields->fields[j].name, CONTACT_TYPE_NAME) == 0) {
               field = str_to_type(app_fields->fields[j].value);
               field <<= 4;
-              int2barr(*cargo, TYPE_OFFSET, &field, 0, 4);
+              int2barr(*cargo, TYPE_OFFSET(i), &field, 0, 4);
           }
-          if (strcmp(app_fields->fields[j].name, CONTACT_DEPTH) == 0) {
+          if (strcmp(app_fields->fields[j].name, CONTACT_DEPTH_NAME) == 0) {
               if (strcmp(app_fields->fields[j].value, "n.a.") == 0) {
                   field = 1023;
               } else {
@@ -426,16 +433,16 @@ cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* car
               }
               field <<= 6;
               field = swap(field, (10+7)/8);
-              int2barr(*cargo, DEPTH_OFFSET, &field, 0, 10);
+              int2barr(*cargo, DEPTH_OFFSET(i), &field, 0, 10);
           }
       }
-      if (strcmp(app_fields->fields[j].name, USERID) == 0) {
+      if (strcmp(app_fields->fields[j].name, USERID_NAME) == 0) {
           field = atoi(app_fields->fields[j].value) & 0x3fffffffU;
           field <<= 2;
           field = swap(field, (30+7)/8);
-          int2barr(*cargo, USERID_OFFSET, &field, 0, 30);
+          int2barr(*cargo, USERID_OFFSET(i), &field, 0, 30);
       }
-      if (strcmp(app_fields->fields[j].name, LATITUDE) == 0) {
+      if (strcmp(app_fields->fields[j].name, LATITUDE_NAME) == 0) {
           if (strcmp(app_fields->fields[j].value, "n.a.") == 0 || lat_flag) {
               if (i == 0) {
                   lat_flag = 1;
@@ -452,10 +459,10 @@ cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* car
           }
           field_len = i == 0 ? 24 : 16;
           field = swap(field, (field_len+7)/8);
-          int2barr(*cargo, LATITUDE_OFFSET, &field, 0, field_len);
+          int2barr(*cargo, LATITUDE_OFFSET(i), &field, 0, field_len);
       }
 
-      if (strcmp(app_fields->fields[j].name, LONGITUDE) == 0) {
+      if (strcmp(app_fields->fields[j].name, LONGITUDE_NAME) == 0) {
           if (strcmp(app_fields->fields[j].value, "n.a.") == 0 || lon_flag) {
               if (i == 0) {
                   lon_flag = 1;
@@ -474,18 +481,18 @@ cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* car
           field_len = i == 0 ? 25 : 16;
           field <<= (field_len % 8) ? 8 - (field_len % 8) : 0;
           field = swap(field, (field_len+7)/8);
-          int2barr(*cargo, LONGITUDE_OFFSET, &field, 0, field_len);
+          int2barr(*cargo, LONGITUDE_OFFSET(i), &field, 0, field_len);
       }
 
-      if (strcmp(app_fields->fields[j].name, TRUE_HEADING) == 0) {
+      if (strcmp(app_fields->fields[j].name, TRUE_HEADING_NAME) == 0) {
           th = atof(app_fields->fields[j].value);
       }
 
-      if (strcmp(app_fields->fields[j].name, COG) == 0) {
+      if (strcmp(app_fields->fields[j].name, COG_NAME) == 0) {
           cog = atof(app_fields->fields[j].value);
       }
 
-      if (strcmp(app_fields->fields[j].name, SPEED) == 0) {
+      if (strcmp(app_fields->fields[j].name, SPEED_NAME) == 0) {
           if (strcmp(app_fields->fields[j].value, "n.a.") == 0) {
               field = 255;
           } else if (strcmp(app_fields->fields[j].value, ">= 86") == 0) {
@@ -493,13 +500,13 @@ cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* car
           } else {
               field = encode_speed(atof(app_fields->fields[j].value));
           }
-          int2barr(*cargo, SPEED_OFFSET, &field, 0, 8);
+          int2barr(*cargo, SPEED_OFFSET(i), &field, 0, 8);
       }      
       
-      if (strcmp(app_fields->fields[j].name, NAVIGATIONAL_STATUS) == 0) {
+      if (strcmp(app_fields->fields[j].name, NAVIGATIONAL_STATUS_NAME) == 0) {
           field = status = str_to_status(app_fields->fields[j].value);
           field <<= 4;
-          int2barr(*cargo, NAVIGATIONAL_STATUS_OFFSET, &field, 0, 4);
+          int2barr(*cargo, NAVIGATIONAL_STATUS_OFFSET(i), &field, 0, 4);
           switch (status) {
           case 1: /* At anchor */
           case 5: /* Moored */
@@ -512,7 +519,7 @@ cargo_encode(janus_app_fields_t app_fields, janus_uint8_t** cargo, unsigned* car
           if (field < 0 || field > 511) field = 511;
           field <<= 7;
           field = swap(field, (9+7)/8);
-          int2barr(*cargo, COG_OFFSET, &field, 0, 9);
+          int2barr(*cargo, COG_OFFSET(i), &field, 0, 9);
           
           i++;
       }
-- 
2.24.0

